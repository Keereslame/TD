COMPONENT

<template>
  <highcharts class="stock" :constructor-type="'stockChart'" :options="stockOptions" id="temperaturechart"></highcharts>
</template>

<script>
  const alertTemperature = 3;
  export default {
    props: [
      'dataTemperatureChart',
    ],
    data() {
      this.$setRefTempChart()
      return {
        stockOptions: {
          title: {
            text: ""
          },
          time: {
            timezoneOffset: -120,
          },
          chart: {
            style: {
              fontFamily: 'Roboto'
            },
          },
          scrollbar: {
            barBackgroundColor: '#cccccc',
            barBorderRadius: 7,
            barBorderWidth: 0,
            buttonBackgroundColor: '#cccccc',
            buttonBorderWidth: 0,
            buttonBorderRadius: 7,
            trackBackgroundColor: 'none',
            trackBorderWidth: 1,
            trackBorderRadius: 8,
            trackBorderColor: '#CCC'
          },
          // xAxis: {
          //   plotBands: plotBands
          // },
          yAxis: [{ // Primary yAxis
            title: {
              // text: 'Température du sol',
              style: {
                color: '#4285f4'
              },
            },
            labels: {
              format: '{value} °C',
            },
            softMin : this.$refMinTempValue,
            softMax : this.$refMaxTempValue,
            opposite: true,
            plotLines: [{
              value: alertTemperature,
              color: 'palevioletred',
              dashStyle: 'longdash',
              width: 1.3,
              label: {
                text: 'Niveau alerte glace',
                style: {
                  color: 'gray'
                }
              }
            }]
          }, { // Secondary yAxis
            title: {
              // text: 'Température du capteur',
              style: {
                color: '#f4b400'
              },
            },
            labels: {
              format: '{value} °C',
            },
            opposite: true
          }],
          rangeSelector: {
            selected: 'all',
            buttons: [{
              type: 'hour',
              count: 12,
              text: '12 h',
              //could be perhaps used to set the group by
              //events:{
              //  click : function(){
              //    alert('12 h clicked')
              //  }
              //}
            }, {
              type: 'hour',
              count: 24,
              text: '24 h'
            }, {
              type: 'day',
              count: 5,
              text: '5 j'
          },/* {
            type: 'month',
            count: 3,
            text: '3m'
          }, */{
              type: 'all',
              text: 'Tous'
            }]
          },
          series: this.dataTemperatureChart,
          navigator: {
            enabled: false
          },
          legend: {
            enabled: true,
            layout: 'horizontal',
            align: 'center',
            x: 0,
            verticalAlign: 'top',
            y: 0,
            floating: true,
          },
          exporting: {
            enabled:true,
            buttons: {
              exportButton: {
                enabled: true
              }
            }
          },
          tooltip: {
            pointFormat: '{series.name}: <b>{point.y:.1f}°C</b><br/>'
          },
        }
      }
    },
    watch: {
      dataTemperatureChart(newValue) {
        this.stockOptions.series = newValue
      },
    }
  }
</script>
<style scoped>
  .stock {
    width: auto; /*auto*/
  }
</style>

. 

sur ta page 
<div class="col-lg-13">
      <card title="Courbes des températures">
        <TemperatureChart :dataTemperatureChart="series_chart" />
      </card>
    </div>


query

      loadDataChart: function (sensorType, location, field_floor, field_sensor) {
        let serie1;
        let serie2;
        let query1 = 'SELECT median(' + field_floor + ') FROM mqtt_consumer where ' +
          '"' + 'topic' + '"' + ' =' + "'" + 'hes_ayent-snow/devices/' +
          sensorType + '-' + location + '/up' + "'" + 'AND time>now()-7d GROUP BY time(10m)'
        let query2 = ''
        // console.log(query1)
        // console.log(query2)
        Promise.all([
          client.query(query1),
        ]).then(parsedRes => {
          serie1 = parsedRes.map(arr => {
            return Object.assign({}, {
              data: arr.map(obj => Object.assign({}, {
                x: (moment(obj.time).unix()) * 1000,
                y: obj['median']
              }))
            });
          });
          Promise.all([
            client.query(query2),
          ]).then(parsedRes => {
            serie2 = parsedRes.map(arr => {
              return Object.assign({}, {
                data: arr.map(obj => Object.assign({}, {
                  x: (moment(obj.time).unix()) * 1000,
                  y: obj['median']
                }))
              });
            });
            //build final objet to send to chart
            let serieFinal = [{
              name: 'Température du sol',
              color: '#4285f4', //bleu
              //type : 'spline',
              lineWidth: 0.6,
              turboThreshold: 60000,           // if no data displayed : augmented it
              data: serie1[0].data
            }, {
              name: 'Température du capteur',
              color: '#f4b400', //orange
              //type : 'spline',
              lineWidth: 0.6,
              turboThreshold: 60000,           // if no data displayed : augmented it
              data: serie2[0].data,
            }]
            this.series_chart = serieFinal
            //console.log(this.series_chart)
          }).catch(error => console.log(error))
        }).catch(error => console.log(error))
      },
    }
  }

