{"remainingRequest":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/src/components/Temperature_amg8833.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/src/components/Temperature_amg8833.vue","mtime":1594971091931},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JzsKaW1wb3J0IEluZmx1eCBmcm9tICJpbmZsdXgiOwppbXBvcnQgVGVtcF9saW5lX2hpZ2hjaGFydHMgZnJvbSAiLi9UZW1wX2xpbmVfaGlnaGNoYXJ0cyI7CgpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAiVGVtcGVyYXR1cmVfYW1nODgzIiwKICAgIGNvbXBvbmVudHM6IHsKICAgICAgICBUZW1wZXJhdHVyZV9saW5lX2hpZ2hjaGFydHMKICAgIH0sCiAgICBkYXRhKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGNsaWVudDogbmV3IEluZmx1eC5JbmZsdXhEQih7CiAgICAgICAgICAgICAgICBob3N0OiAnMTkyLjE2OC4xLjcwJywKICAgICAgICAgICAgICAgIGRhdGFiYXNlOiAnbG93aW1wYWN0X2Zvb2QnLAogICAgICAgICAgICAgICAgcG9ydDo4MDg2CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICB0ZW1wX3NlcmllczogW10sCiAgICAgICAgfQogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBsb2FkRGF0YUNoYXJ0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coInVwZGF0ZSB0ZW1wZXJhdHVyZSBib3ggY2hhcnRzIikKICAgICAgICAgICAgbGV0IHRlbXBlcmF0dXJlX1NlcmllMTsKICAgICAgICAgICAgbGV0IHRlbXBlcmF0dXJlX1NlcmllMjsKICAgICAgICAgICAgbGV0IHF1ZXJ5X3RlbXBTZXJpZTEgPSAnU0VMRUNUIHRlbXBfbWF4IEZST00gYW1nODgzMyBXSEVSRSB0aW1lID4gbm93KCkgLSA3ZCc7CiAgICAgICAgICAgIGxldCBxdWVyeV90ZW1wU2VyaWUyID0gJ1NFTEVDVCB0ZW1wX21pbiBGUk9NIGFtZzg4MzMgV0hFUkUgdGltZSA+IG5vdygpIC0gN2QnOwogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCJRdWVyeToiICsgcXVlcnlfdGVtcFNlcmllMSkKICAgICAgICAgICAgUHJvbWlzZS5hbGwoWwogICAgICAgICAgICAgICAgdGhpcy5jbGllbnQucXVlcnkocXVlcnlfdGVtcFNlcmllMSksCiAgICAgICAgICAgIF0pLnRoZW4ocmVzdWx0cyA9PiB7CiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCJSZXN1bHQiKQogICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhyZXN1bHRzKQogICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhyZXN1bHRzWzBdLmxlbmd0aCkKICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlX1NlcmllMSA9IHJlc3VsdHNbMF0ubWFwKGEgPT4gewogICAgICAgICAgICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoKyhtb21lbnQoYS50aW1lKS51bml4KCkpICogMTAwMCkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBkYXRlLnRvU3RyaW5nKCksCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpXS5qb2luKCcvJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnRlbXBfbWF4CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChbCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGllbnQucXVlcnkocXVlcnlfdGVtcFNlcmllMiksCiAgICAgICAgICAgICAgICBdKS50aGVuKHJlc3VsdHMgPT4gewogICAgICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlX1NlcmllMiA9IHJlc3VsdHNbMF0ubWFwKGEgPT4gewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCsobW9tZW50KGEudGltZSkudW5peCgpKSAqIDEwMDApCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBkYXRlLnRvU3RyaW5nKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCldLmpvaW4oJy8nKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnRlbXBfbWluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coIlRlbXBlcmF0dXJlIHNlcmllIDEiKQogICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2codGVtcGVyYXR1cmVfU2VyaWUxKQogICAgICAgICAgICAgICAgICAgIGxldCBmaW5hbGVfc2VyaWVzID0gW3sKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1RlbXDDqXJhdHVyZSBtYXhpbWFsIGRlcyBiYWNzJywKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB0ZW1wZXJhdHVyZV9TZXJpZTEKICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdUZW1ww6lyYXR1cmUgbWluaW1hbCBkZXMgYmFjcycsCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lJywKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogdGVtcGVyYXR1cmVfU2VyaWUyCiAgICAgICAgICAgICAgICAgICAgfV0KICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCJTZXJpZSBmaW5hbGUiKQogICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZmluYWxlX3NlcmllcykKICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbXBfc2VyaWVzID0gZmluYWxlX3NlcmllcwogICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpKQogICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcikpCiAgICAgICAgfQogICAgfSwKICAgIGNyZWF0ZWQoKSB7CiAgICAgICAgdGhpcy5sb2FkRGF0YUNoYXJ0KCkKICAgIH0sCiAgICBtb3VudGVkKCkgewogICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHRoaXMubG9hZERhdGFDaGFydCgpCiAgICAgICAgfS5iaW5kKHRoaXMpLCAzMDAwMDApIC8vcmVmcmVzaCBxdWVyeSB0b3V0ZXMgbGVzIDVtaW4KICAgIH0KfQo="},{"version":3,"sources":["Temperature_amg8833.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Temperature_amg8833.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"mt-3\">\n        <b-card border-variant=\"light\" header=\"Température des bacs\" class=\"text-center\">\n            <Temp_line_highcharts :temperature-series=\"temp_series\"/>\n        </b-card>\n    </div>\n</template>\n<script>\n    import moment from 'moment';\n    import Influx from \"influx\";\n    import Temp_line_highcharts from \"./Temp_line_highcharts\";\n\n    export default {\n        name: \"Temperature_amg883\",\n        components: {\n            Temperature_line_highcharts\n        },\n        data() {\n            return {\n                client: new Influx.InfluxDB({\n                    host: '192.168.1.70',\n                    database: 'lowimpact_food',\n                    port:8086\n                }),\n                temp_series: [],\n            }\n        },\n        methods: {\n            loadDataChart: function () {\n                //console.log(\"update temperature box charts\")\n                let temperature_Serie1;\n                let temperature_Serie2;\n                let query_tempSerie1 = 'SELECT temp_max FROM amg8833 WHERE time > now() - 7d';\n                let query_tempSerie2 = 'SELECT temp_min FROM amg8833 WHERE time > now() - 7d';\n                //console.log(\"Query:\" + query_tempSerie1)\n                Promise.all([\n                    this.client.query(query_tempSerie1),\n                ]).then(results => {\n                    //console.log(\"Result\")\n                    //console.log(results)\n                    //console.log(results[0].length)\n                    temperature_Serie1 = results[0].map(a => {\n                        var date = new Date(+(moment(a.time).unix()) * 1000)\n                        return {\n                            name: date.toString(),\n                            value: [\n                                [date.getFullYear(), date.getMonth(), date.getDate()].join('/'),\n                                a.temp_max\n                            ]\n                        };\n                    });\n                    Promise.all([\n                        this.client.query(query_tempSerie2),\n                    ]).then(results => {\n                        temperature_Serie2 = results[0].map(a => {\n                            var date = new Date(+(moment(a.time).unix()) * 1000)\n                            return {\n                                name: date.toString(),\n                                value: [\n                                    [date.getFullYear(), date.getMonth(), date.getDate()].join('/'),\n                                    a.temp_min\n                                ]\n                            };\n                        });\n\n                        //console.log(\"Temperature serie 1\")\n                        //console.log(temperature_Serie1)\n                        let finale_series = [{\n                            name: 'Température maximal des bacs',\n                            type: 'line',\n                            data: temperature_Serie1\n                        }, {\n                            name: 'Température minimal des bacs',\n                            type: 'line',\n                            data: temperature_Serie2\n                        }]\n                        //console.log(\"Serie finale\")\n                        //console.log(finale_series)\n                        this.temp_series = finale_series\n                    }).catch(error => console.log(error))\n                }).catch(error => console.log(error))\n            }\n        },\n        created() {\n            this.loadDataChart()\n        },\n        mounted() {\n            setInterval(function(){\n                this.loadDataChart()\n            }.bind(this), 300000) //refresh query toutes les 5min\n        }\n    }\n</script>\n\n<style scoped>\n    .card-header{\n        background-color: lightcoral;\n        text-align: left;\n    }\n\n</style>"]}]}