{"remainingRequest":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/src/components/Temperature_lht65.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/src/components/Temperature_lht65.vue","mtime":1594926249544},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBUZW1wZXJhdHVyZV9MaW5lX0VDaGFydHMgZnJvbSAiLi4vY29tcG9uZW50cy9UZW1wZXJhdHVyZV9MaW5lX0VDaGFydHMiOwppbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7CmltcG9ydCBJbmZsdXggZnJvbSAiaW5mbHV4IjsKaW1wb3J0IGVjaGFydHMgZnJvbSAnZWNoYXJ0cycKCmV4cG9ydCBkZWZhdWx0IHsKICAgIG5hbWU6ICJUZW1wZXJhdHVyZV9saHQ2NSIsCiAgICBjb21wb25lbnRzOiB7CiAgICAgICAgVGVtcGVyYXR1cmVfTGluZV9FQ2hhcnRzCiAgICB9LAogICAgZGF0YSgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBjbGllbnQ6IG5ldyBJbmZsdXguSW5mbHV4REIoewogICAgICAgICAgICAgICAgaG9zdDogJzE5Mi4xNjguMS43MCcsCiAgICAgICAgICAgICAgICBkYXRhYmFzZTogJ2xvd2ltcGFjdF9mb29kJywKICAgICAgICAgICAgICAgIHBvcnQ6ODA4NgogICAgICAgICAgICB9KSwKICAgICAgICAgICAgdGVtcF9zZXJpZXM6IFtdLAogICAgICAgIH0KICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgbG9hZERhdGFDaGFydDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICBsZXQgdGVtcGVyYXR1cmVfU2VyaWUxOwogICAgICAgICAgICBsZXQgdGVtcGVyYXR1cmVfU2VyaWUyOwogICAgICAgICAgICBsZXQgcXVlcnlfdGVtcFNlcmllMSA9ICdTRUxFQ1QgVGVtcENfU0hUIEZST00gdHRuX2xodDY1ICc7IC8vV0hFUkUgdGltZSA+IG5vdygpIC0gN2QnOwogICAgICAgICAgICBsZXQgcXVlcnlfdGVtcFNlcmllMiA9ICdTRUxFQ1QgVGVtcENfRFMgRlJPTSB0dG5fbGh0NjUnOy8vIEFORCB0aW1lID4gbm93KCkgLSA3ZCc7CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coIlF1ZXJ5OiIgKyBxdWVyeV90ZW1wU2VyaWUxKQogICAgICAgICAgICBQcm9taXNlLmFsbChbCiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5xdWVyeShxdWVyeV90ZW1wU2VyaWUxKSwKICAgICAgICAgICAgXSkudGhlbihyZXN1bHRzID0+IHsKICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coIlJlc3VsdCIpCiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHJlc3VsdHMpCiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHJlc3VsdHNbMF0ubGVuZ3RoKQogICAgICAgICAgICAgICAgdGVtcGVyYXR1cmVfU2VyaWUxID0gcmVzdWx0c1swXS5tYXAoYSA9PiB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgrKG1vbWVudChhLnRpbWUpLnVuaXgoKSkgKiAxMDAwKQogICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGRhdGUudG9TdHJpbmcoKSwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCldLmpvaW4oJy8nKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuVGVtcENfU0hUCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChbCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGllbnQucXVlcnkocXVlcnlfdGVtcFNlcmllMiksCiAgICAgICAgICAgICAgICBdKS50aGVuKHJlc3VsdHMgPT4gewogICAgICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlX1NlcmllMiA9IHJlc3VsdHNbMF0ubWFwKGEgPT4gewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCsobW9tZW50KGEudGltZSkudW5peCgpKSAqIDEwMDApCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBkYXRlLnRvU3RyaW5nKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCldLmpvaW4oJy8nKSBbZGF0ZS5nZXRIb3VycygpLGRhdGUuZ2V0TWludXRlcygpLGRhdGUuZ2V0U2Vjb25kcygpXS5qb2luKCc6JyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5UZW1wQ19EUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCJUZW1wZXJhdHVyZSBzZXJpZSAxIikKICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHRlbXBlcmF0dXJlX1NlcmllMSkKICAgICAgICAgICAgICAgICAgICBsZXQgZmluYWxlX3NlcmllcyA9IFt7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdUZW1ww6lyYXR1cmUgZHUgYm/DrnRpZXInLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICAgICAgICAgICAgICAgIHNtb290aDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sOiAnbm9uZScsCiAgICAgICAgICAgICAgICAgICAgICAgIHNhbXBsaW5nOiAnYXZlcmFnZScsCiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1TdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2IoMjU1LCA3MCwgMTMxKScKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYXJlYVN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogbmV3IGVjaGFydHMuZ3JhcGhpYy5MaW5lYXJHcmFkaWVudCgwLCAwLCAwLCAxLCBbewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYigyNTUsIDE1OCwgNjgpJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYigyNTUsIDcwLCAxMzEpJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0pCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHRlbXBlcmF0dXJlX1NlcmllMQogICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1RlbXDDqXJhdHVyZSBkZSBsYSBzb25kZScsCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lJywKICAgICAgICAgICAgICAgICAgICAgICAgc21vb3RoOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2w6ICdub25lJywKICAgICAgICAgICAgICAgICAgICAgICAgc2FtcGxpbmc6ICdhdmVyYWdlJywKICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYigyNTUsIDcwLCAxMzEpJwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBhcmVhU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBuZXcgZWNoYXJ0cy5ncmFwaGljLkxpbmVhckdyYWRpZW50KDAsIDAsIDAsIDEsIFt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAncmdiKDI1NSwgMTU4LCA2OCknCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAncmdiKDI1NSwgNzAsIDEzMSknCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSkKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogdGVtcGVyYXR1cmVfU2VyaWUyCiAgICAgICAgICAgICAgICAgICAgfV0KICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCJTZXJpZSBmaW5hbGUiKQogICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZmluYWxlX3NlcmllcykKICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbXBfc2VyaWVzID0gZmluYWxlX3NlcmllcwogICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpKQogICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcikpCiAgICAgICAgfQogICAgfSwKICAgIGNyZWF0ZWQoKSB7CiAgICAgICAgdGhpcy5sb2FkRGF0YUNoYXJ0KCkKICAgIH0sCiAgICBtb3VudGVkKCkgewogICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHRoaXMubG9hZERhdGFDaGFydCgpCiAgICAgICAgfS5iaW5kKHRoaXMpLCAzMDAwMDApIC8vcmVmcmVzaCBxdWVyeSB0b3V0ZXMgbGVzIDVtaW4KICAgIH0KfQo="},{"version":3,"sources":["Temperature_lht65.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Temperature_lht65.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"mt-3\">\n            <b-card border-variant=\"light\" header=\"TempÃ©rature de la chambre\" class=\"text-center\">\n                <Temperature_Line_ECharts :temperature-series=\"temp_series\"/>\n            </b-card>\n    </div>\n</template>\n\n<script>\n    import Temperature_Line_ECharts from \"../components/Temperature_Line_ECharts\";\n    import moment from 'moment';\n    import Influx from \"influx\";\n    import echarts from 'echarts'\n\n    export default {\n        name: \"Temperature_lht65\",\n        components: {\n            Temperature_Line_ECharts\n        },\n        data() {\n            return {\n                client: new Influx.InfluxDB({\n                    host: '192.168.1.70',\n                    database: 'lowimpact_food',\n                    port:8086\n                }),\n                temp_series: [],\n            }\n        },\n        methods: {\n            loadDataChart: function () {\n                let temperature_Serie1;\n                let temperature_Serie2;\n                let query_tempSerie1 = 'SELECT TempC_SHT FROM ttn_lht65 '; //WHERE time > now() - 7d';\n                let query_tempSerie2 = 'SELECT TempC_DS FROM ttn_lht65';// AND time > now() - 7d';\n                //console.log(\"Query:\" + query_tempSerie1)\n                Promise.all([\n                    this.client.query(query_tempSerie1),\n                ]).then(results => {\n                    //console.log(\"Result\")\n                    //console.log(results)\n                    //console.log(results[0].length)\n                    temperature_Serie1 = results[0].map(a => {\n                        var date = new Date(+(moment(a.time).unix()) * 1000)\n                        return {\n                            name: date.toString(),\n                            value: [\n                                [date.getFullYear(), date.getMonth(), date.getDate()].join('/'),\n                                a.TempC_SHT\n                            ]\n                        };\n                    });\n                    Promise.all([\n                        this.client.query(query_tempSerie2),\n                    ]).then(results => {\n                        temperature_Serie2 = results[0].map(a => {\n                            var date = new Date(+(moment(a.time).unix()) * 1000)\n                            return {\n                                name: date.toString(),\n                                value: [\n                                    [date.getFullYear(), date.getMonth(), date.getDate()].join('/') [date.getHours(),date.getMinutes(),date.getSeconds()].join(':'),\n                                    a.TempC_DS\n                                ]\n                            };\n                        });\n\n                        //console.log(\"Temperature serie 1\")\n                        //console.log(temperature_Serie1)\n                        let finale_series = [{\n                            name: 'TempÃ©rature du boÃ®tier',\n                            type: 'line',\n                            smooth: true,\n                            symbol: 'none',\n                            sampling: 'average',\n                            itemStyle: {\n                                color: 'rgb(255, 70, 131)'\n                            },\n                            areaStyle: {\n                                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                                    offset: 0,\n                                    color: 'rgb(255, 158, 68)'\n                                }, {\n                                    offset: 1,\n                                    color: 'rgb(255, 70, 131)'\n                                }])\n                            },\n                            data: temperature_Serie1\n                        }, {\n                            name: 'TempÃ©rature de la sonde',\n                            type: 'line',\n                            smooth: true,\n                            symbol: 'none',\n                            sampling: 'average',\n                            itemStyle: {\n                                color: 'rgb(255, 70, 131)'\n                            },\n                            areaStyle: {\n                                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                                    offset: 0,\n                                    color: 'rgb(255, 158, 68)'\n                                }, {\n                                    offset: 1,\n                                    color: 'rgb(255, 70, 131)'\n                                }])\n                            },\n                            data: temperature_Serie2\n                        }]\n                        //console.log(\"Serie finale\")\n                        //console.log(finale_series)\n                        this.temp_series = finale_series\n                    }).catch(error => console.log(error))\n                }).catch(error => console.log(error))\n            }\n        },\n        created() {\n            this.loadDataChart()\n        },\n        mounted() {\n            setInterval(function(){\n                this.loadDataChart()\n            }.bind(this), 300000) //refresh query toutes les 5min\n        }\n    }\n</script>\n\n<style scoped>\n    .card-header{\n        background-color: lightcoral;\n        text-align: left;\n    }\n\n</style>"]}]}