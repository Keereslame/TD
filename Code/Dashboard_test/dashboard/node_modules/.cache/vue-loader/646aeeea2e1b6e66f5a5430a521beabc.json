{"remainingRequest":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/src/components/Temp_lht65.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/src/components/Temp_lht65.vue","mtime":1594932911778},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnOwppbXBvcnQgSW5mbHV4IGZyb20gImluZmx1eCI7CmltcG9ydCBUZW1wX2xpbmVfaGlnaGNoYXJ0cyBmcm9tICIuL1RlbXBfbGluZV9oaWdoY2hhcnRzIjsKCmV4cG9ydCBkZWZhdWx0IHsKICAgIG5hbWU6ICJUZW1wX2xodDY1IiwKICAgIGNvbXBvbmVudHM6IHsKICAgICAgICBUZW1wX2xpbmVfaGlnaGNoYXJ0cwogICAgfSwKICAgIGRhdGEoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgY2xpZW50OiBuZXcgSW5mbHV4LkluZmx1eERCKHsKICAgICAgICAgICAgICAgIGhvc3Q6ICcxOTIuMTY4LjEuNzAnLAogICAgICAgICAgICAgICAgZGF0YWJhc2U6ICdsb3dpbXBhY3RfZm9vZCcsCiAgICAgICAgICAgICAgICBwb3J0OjgwODYKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIHRlbXBfc2VyaWVzOiBbXSwKICAgICAgICB9CiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIGxvYWREYXRhQ2hhcnQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgbGV0IHRlbXBlcmF0dXJlX1NlcmllMTsKICAgICAgICAgICAgbGV0IHRlbXBlcmF0dXJlX1NlcmllMjsKICAgICAgICAgICAgbGV0IHF1ZXJ5X3RlbXBTZXJpZTEgPSAnU0VMRUNUIFRlbXBDX1NIVCBGUk9NIHR0bl9saHQ2NSBXSEVSRSB0aW1lID4gbm93KCkgLSA3ZCc7CiAgICAgICAgICAgIGxldCBxdWVyeV90ZW1wU2VyaWUyID0gJ1NFTEVDVCBUZW1wQ19EUyBGUk9NIHR0bl9saHQ2NSBXSEVSRSB0aW1lID4gbm93KCkgLSA3ZCc7CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coIlF1ZXJ5OiIgKyBxdWVyeV90ZW1wU2VyaWUxKQogICAgICAgICAgICBQcm9taXNlLmFsbChbCiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5xdWVyeShxdWVyeV90ZW1wU2VyaWUxKSwKICAgICAgICAgICAgXSkudGhlbihyZXN1bHRzID0+IHsKICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coIlJlc3VsdCIpCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRzKQogICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhyZXN1bHRzWzBdLmxlbmd0aCkKICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlX1NlcmllMSA9IHJlc3VsdHNbMF0ubWFwKGEgPT4gewogICAgICAgICAgICAgICAgICAgIC8vdmFyIGRhdGUgPSBuZXcgRGF0ZSgobW9tZW50KGEudGltZSkudW5peCgpKSAqIDEwMDApCiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhhLnRpbWUpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgeDogYS50aW1lLC8vKG1vbWVudChhLnRpbWUpLnVuaXgoKSkqMTAwMCwKICAgICAgICAgICAgICAgICAgICAgICAgeTogcGFyc2VGbG9hdChhLlRlbXBDX1NIVCkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChbCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGllbnQucXVlcnkocXVlcnlfdGVtcFNlcmllMiksCiAgICAgICAgICAgICAgICBdKS50aGVuKHJlc3VsdHMgPT4gewogICAgICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlX1NlcmllMiA9IHJlc3VsdHNbMF0ubWFwKGEgPT4gewogICAgICAgICAgICAgICAgICAgICAgIC8vIHZhciBkYXRlID0gbmV3IERhdGUoKG1vbWVudChhLnRpbWUpLnVuaXgoKSkgKiAxMDAwKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeDphLnRpbWUsLy8obW9tZW50KGEudGltZSkudW5peCgpKSoxMDAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogcGFyc2VGbG9hdChhLlRlbXBDX0RTKQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiVGVtcGVyYXR1cmUgc2VyaWUgMSIpCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGVtcGVyYXR1cmVfU2VyaWUxKQogICAgICAgICAgICAgICAgICAgIGxldCBmaW5hbGVfc2VyaWVzID0gW3sKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1RlbXDDqXJhdHVyZSBkdSBib8OudGllcicsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHRlbXBlcmF0dXJlX1NlcmllMQogICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1RlbXDDqXJhdHVyZSBkZSBsYSBzb25kZScsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHRlbXBlcmF0dXJlX1NlcmllMgogICAgICAgICAgICAgICAgICAgIH1dCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIlNlcmllIGZpbmFsZSIpCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZmluYWxlX3NlcmllcykKICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbXBfc2VyaWVzID0gZmluYWxlX3NlcmllcwogICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpKQogICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcikpCiAgICAgICAgfQogICAgfSwKICAgIGNyZWF0ZWQoKSB7CiAgICAgICAgdGhpcy5sb2FkRGF0YUNoYXJ0KCkKICAgIH0sCiAgICBtb3VudGVkKCkgewogICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHRoaXMubG9hZERhdGFDaGFydCgpCiAgICAgICAgfS5iaW5kKHRoaXMpLCAzMDAwMDApIC8vcmVmcmVzaCBxdWVyeSB0b3V0ZXMgbGVzIDVtaW4KICAgIH0KfQo="},{"version":3,"sources":["Temp_lht65.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Temp_lht65.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"mt-3\">\n        <b-card border-variant=\"light\" header=\"Température de la chambre\" class=\"text-center\">\n            <Temp_line_highcharts :temperature-series=\"temp_series\"/>\n        </b-card>\n    </div>\n</template>\n\n<script>\n    //import moment from 'moment';\n    import Influx from \"influx\";\n    import Temp_line_highcharts from \"./Temp_line_highcharts\";\n\n    export default {\n        name: \"Temp_lht65\",\n        components: {\n            Temp_line_highcharts\n        },\n        data() {\n            return {\n                client: new Influx.InfluxDB({\n                    host: '192.168.1.70',\n                    database: 'lowimpact_food',\n                    port:8086\n                }),\n                temp_series: [],\n            }\n        },\n        methods: {\n            loadDataChart: function () {\n                let temperature_Serie1;\n                let temperature_Serie2;\n                let query_tempSerie1 = 'SELECT TempC_SHT FROM ttn_lht65 WHERE time > now() - 7d';\n                let query_tempSerie2 = 'SELECT TempC_DS FROM ttn_lht65 WHERE time > now() - 7d';\n                //console.log(\"Query:\" + query_tempSerie1)\n                Promise.all([\n                    this.client.query(query_tempSerie1),\n                ]).then(results => {\n                    //console.log(\"Result\")\n                    console.log(results)\n                    //console.log(results[0].length)\n                    temperature_Serie1 = results[0].map(a => {\n                        //var date = new Date((moment(a.time).unix()) * 1000)\n                        //console.log(a.time)\n                        return {\n                            x: a.time,//(moment(a.time).unix())*1000,\n                            y: parseFloat(a.TempC_SHT)\n                        };\n                    });\n                    Promise.all([\n                        this.client.query(query_tempSerie2),\n                    ]).then(results => {\n                        temperature_Serie2 = results[0].map(a => {\n                           // var date = new Date((moment(a.time).unix()) * 1000)\n                            return {\n                                x:a.time,//(moment(a.time).unix())*1000,\n                                y: parseFloat(a.TempC_DS)\n                            };\n                        });\n\n                        console.log(\"Temperature serie 1\")\n                        console.log(temperature_Serie1)\n                        let finale_series = [{\n                            name: 'Température du boîtier',\n                            data: temperature_Serie1\n                        }, {\n                            name: 'Température de la sonde',\n                            data: temperature_Serie2\n                        }]\n                        console.log(\"Serie finale\")\n                        console.log(finale_series)\n                        this.temp_series = finale_series\n                    }).catch(error => console.log(error))\n                }).catch(error => console.log(error))\n            }\n        },\n        created() {\n            this.loadDataChart()\n        },\n        mounted() {\n            setInterval(function(){\n                this.loadDataChart()\n            }.bind(this), 300000) //refresh query toutes les 5min\n        }\n    }\n</script>\n\n<style scoped>\n    .card-header{\n        background-color: lightcoral;\n        text-align: left;\n    }\n\n</style>"]}]}