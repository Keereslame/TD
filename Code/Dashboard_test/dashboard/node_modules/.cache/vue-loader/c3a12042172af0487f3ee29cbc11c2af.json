{"remainingRequest":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/src/components/Temperature_amg8833.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/src/components/Temperature_amg8833.vue","mtime":1595238023164},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vICBpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7CmltcG9ydCBJbmZsdXggZnJvbSAiaW5mbHV4IjsKaW1wb3J0IFRlbXBfbGluZV9oaWdoY2hhcnRzX29mZnNldCBmcm9tICIuL1RlbXBfbGluZV9IaWdoQ2hhcnRzX29mZnNldCI7CgpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAiVGVtcGVyYXR1cmVfYW1nODgzIiwKICAgIGNvbXBvbmVudHM6IHsKICAgICAgICBUZW1wX2xpbmVfaGlnaGNoYXJ0c19vZmZzZXQKICAgIH0sCiAgICBkYXRhKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGNsaWVudDogbmV3IEluZmx1eC5JbmZsdXhEQih7CiAgICAgICAgICAgICAgICAvL2hvc3Q6ICcxOTIuMTY4LjEuNzAnLCAvLyBtYWlzb24KICAgICAgICAgICAgICAgIGhvc3Q6ICcxNTMuMTA5LjcuMzAnLCAgIC8vw6ljb2xlCiAgICAgICAgICAgICAgICBkYXRhYmFzZTogJ2xvd2ltcGFjdF9mb29kJywKICAgICAgICAgICAgICAgIHBvcnQ6ODA4NgogICAgICAgICAgICB9KSwKICAgICAgICAgICAgdGVtcF9zZXJpZXM6IFtdLAogICAgICAgIH0KICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgbG9hZERhdGFDaGFydDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCJ1cGRhdGUgdGVtcGVyYXR1cmUgYm94IGNoYXJ0cyIpCiAgICAgICAgICAgIGxldCB0ZW1wZXJhdHVyZV9TZXJpZTE7CiAgICAgICAgICAgIGxldCB0ZW1wZXJhdHVyZV9TZXJpZTI7CiAgICAgICAgICAgIGxldCBxdWVyeV90ZW1wU2VyaWUxID0gJ1NFTEVDVCB0ZW1wX21heCBGUk9NIGFtZzg4MzMgV0hFUkUgdGltZSA+IG5vdygpIC0gN2gnOwogICAgICAgICAgICBsZXQgcXVlcnlfdGVtcFNlcmllMiA9ICdTRUxFQ1QgdGVtcF9taW4gRlJPTSBhbWc4ODMzIFdIRVJFIHRpbWUgPiBub3coKSAtIDdoJzsKICAgICAgICAgICAgLy9jb25zb2xlLmxvZygiUXVlcnk6IiArIHF1ZXJ5X3RlbXBTZXJpZTEpCiAgICAgICAgICAgIFByb21pc2UuYWxsKFsKICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50LnF1ZXJ5KHF1ZXJ5X3RlbXBTZXJpZTEpLAogICAgICAgICAgICBdKS50aGVuKHJlc3VsdHMgPT4gewogICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygiUmVzdWx0IikKICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cocmVzdWx0cykKICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cocmVzdWx0c1swXS5sZW5ndGgpCiAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZV9TZXJpZTEgPSByZXN1bHRzWzBdLm1hcChhID0+IHsKICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGEudGltZSkKICAgICAgICAgICAgICAgICAgICAvL3ZhciBkYXRlID0gbmV3IERhdGUoKyhtb21lbnQoYS50aW1lKS51bml4KCkpICogMTAwMCkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICB4OiAgYS50aW1lLC8vKG1vbWVudChhLnRpbWUpLnVuaXgoKSkqMTAwMCwKICAgICAgICAgICAgICAgICAgICAgICAgeTogcGFyc2VGbG9hdChhLnRlbXBfbWF4KQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKFsKICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5xdWVyeShxdWVyeV90ZW1wU2VyaWUyKSwKICAgICAgICAgICAgICAgIF0pLnRoZW4ocmVzdWx0cyA9PiB7CiAgICAgICAgICAgICAgICAgICAgdGVtcGVyYXR1cmVfU2VyaWUyID0gcmVzdWx0c1swXS5tYXAoYSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIGRhdGUgPSBuZXcgRGF0ZSgrKG1vbWVudChhLnRpbWUpLnVuaXgoKSkgKiAxMDAwKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogYS50aW1lLTcyMDAsLy8obW9tZW50KGEudGltZSkudW5peCgpKSoxMDAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogcGFyc2VGbG9hdChhLnRlbXBfbWluKQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCJUZW1wZXJhdHVyZSBzZXJpZSAxIikKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0ZW1wZXJhdHVyZV9TZXJpZTEpCiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsZV9zZXJpZXMgPSBbewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnVGVtcMOpcmF0dXJlIG1heGltYWwgZGVzIGJhY3MnLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHRlbXBlcmF0dXJlX1NlcmllMQogICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1RlbXDDqXJhdHVyZSBtaW5pbWFsIGRlcyBiYWNzJywKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB0ZW1wZXJhdHVyZV9TZXJpZTIKICAgICAgICAgICAgICAgICAgICB9XQogICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coIlNlcmllIGZpbmFsZSIpCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZmluYWxlX3NlcmllcykKICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbXBfc2VyaWVzID0gZmluYWxlX3NlcmllcwogICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpKQogICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcikpCiAgICAgICAgfQogICAgfSwKICAgIGNyZWF0ZWQoKSB7CiAgICAgICAgdGhpcy5sb2FkRGF0YUNoYXJ0KCkKICAgIH0sCiAgICBtb3VudGVkKCkgewogICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHRoaXMubG9hZERhdGFDaGFydCgpCiAgICAgICAgfS5iaW5kKHRoaXMpLCAzMDAwMDApIC8vcmVmcmVzaCBxdWVyeSB0b3V0ZXMgbGVzIDVtaW4KICAgIH0KfQo="},{"version":3,"sources":["Temperature_amg8833.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Temperature_amg8833.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"mt-3\">\n        <b-card border-variant=\"light\" header=\"Température des bacs\" class=\"text-center\">\n            <Temp_line_highcharts_offset :temperature-series=\"temp_series\"/>\n        </b-card>\n    </div>\n</template>\n<script>\n    //  import moment from 'moment';\n    import Influx from \"influx\";\n    import Temp_line_highcharts_offset from \"./Temp_line_HighCharts_offset\";\n\n    export default {\n        name: \"Temperature_amg883\",\n        components: {\n            Temp_line_highcharts_offset\n        },\n        data() {\n            return {\n                client: new Influx.InfluxDB({\n                    //host: '192.168.1.70', // maison\n                    host: '153.109.7.30',   //école\n                    database: 'lowimpact_food',\n                    port:8086\n                }),\n                temp_series: [],\n            }\n        },\n        methods: {\n            loadDataChart: function () {\n                //console.log(\"update temperature box charts\")\n                let temperature_Serie1;\n                let temperature_Serie2;\n                let query_tempSerie1 = 'SELECT temp_max FROM amg8833 WHERE time > now() - 7h';\n                let query_tempSerie2 = 'SELECT temp_min FROM amg8833 WHERE time > now() - 7h';\n                //console.log(\"Query:\" + query_tempSerie1)\n                Promise.all([\n                    this.client.query(query_tempSerie1),\n                ]).then(results => {\n                    //console.log(\"Result\")\n                    //console.log(results)\n                    //console.log(results[0].length)\n                    temperature_Serie1 = results[0].map(a => {\n                        //console.log(a.time)\n                        //var date = new Date(+(moment(a.time).unix()) * 1000)\n                        return {\n                            x:  a.time,//(moment(a.time).unix())*1000,\n                            y: parseFloat(a.temp_max)\n                        };\n                    });\n                    Promise.all([\n                        this.client.query(query_tempSerie2),\n                    ]).then(results => {\n                        temperature_Serie2 = results[0].map(a => {\n                            //var date = new Date(+(moment(a.time).unix()) * 1000)\n                            return {\n                                x: a.time-7200,//(moment(a.time).unix())*1000,\n                                y: parseFloat(a.temp_min)\n                            };\n                        });\n\n                        //console.log(\"Temperature serie 1\")\n                        console.log(temperature_Serie1)\n                        let finale_series = [{\n                            name: 'Température maximal des bacs',\n                            type: 'line',\n                            data: temperature_Serie1\n                        }, {\n                            name: 'Température minimal des bacs',\n                            type: 'line',\n                            data: temperature_Serie2\n                        }]\n                        //console.log(\"Serie finale\")\n                        console.log(finale_series)\n                        this.temp_series = finale_series\n                    }).catch(error => console.log(error))\n                }).catch(error => console.log(error))\n            }\n        },\n        created() {\n            this.loadDataChart()\n        },\n        mounted() {\n            setInterval(function(){\n                this.loadDataChart()\n            }.bind(this), 300000) //refresh query toutes les 5min\n        }\n    }\n</script>\n\n<style scoped>\n    .card-header{\n        background-color: lightcoral;\n        text-align: left;\n    }\n\n</style>"]}]}