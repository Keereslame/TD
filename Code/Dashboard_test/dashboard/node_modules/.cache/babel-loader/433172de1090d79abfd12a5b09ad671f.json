{"remainingRequest":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/babel-loader/lib/index.js!/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/src/components/Temperature_amg8833.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/src/components/Temperature_amg8833.vue","mtime":1595238023164},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwovLwovLwovLwovLwovLwovLwovLwovLyAgaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnOwppbXBvcnQgSW5mbHV4IGZyb20gImluZmx1eCI7CmltcG9ydCBUZW1wX2xpbmVfaGlnaGNoYXJ0c19vZmZzZXQgZnJvbSAiLi9UZW1wX2xpbmVfSGlnaENoYXJ0c19vZmZzZXQiOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIlRlbXBlcmF0dXJlX2FtZzg4MyIsCiAgY29tcG9uZW50czogewogICAgVGVtcF9saW5lX2hpZ2hjaGFydHNfb2Zmc2V0OiBUZW1wX2xpbmVfaGlnaGNoYXJ0c19vZmZzZXQKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBjbGllbnQ6IG5ldyBJbmZsdXguSW5mbHV4REIoewogICAgICAgIC8vaG9zdDogJzE5Mi4xNjguMS43MCcsIC8vIG1haXNvbgogICAgICAgIGhvc3Q6ICcxNTMuMTA5LjcuMzAnLAogICAgICAgIC8vw6ljb2xlCiAgICAgICAgZGF0YWJhc2U6ICdsb3dpbXBhY3RfZm9vZCcsCiAgICAgICAgcG9ydDogODA4NgogICAgICB9KSwKICAgICAgdGVtcF9zZXJpZXM6IFtdCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgbG9hZERhdGFDaGFydDogZnVuY3Rpb24gbG9hZERhdGFDaGFydCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vY29uc29sZS5sb2coInVwZGF0ZSB0ZW1wZXJhdHVyZSBib3ggY2hhcnRzIikKICAgICAgdmFyIHRlbXBlcmF0dXJlX1NlcmllMTsKICAgICAgdmFyIHRlbXBlcmF0dXJlX1NlcmllMjsKICAgICAgdmFyIHF1ZXJ5X3RlbXBTZXJpZTEgPSAnU0VMRUNUIHRlbXBfbWF4IEZST00gYW1nODgzMyBXSEVSRSB0aW1lID4gbm93KCkgLSA3aCc7CiAgICAgIHZhciBxdWVyeV90ZW1wU2VyaWUyID0gJ1NFTEVDVCB0ZW1wX21pbiBGUk9NIGFtZzg4MzMgV0hFUkUgdGltZSA+IG5vdygpIC0gN2gnOyAvL2NvbnNvbGUubG9nKCJRdWVyeToiICsgcXVlcnlfdGVtcFNlcmllMSkKCiAgICAgIFByb21pc2UuYWxsKFt0aGlzLmNsaWVudC5xdWVyeShxdWVyeV90ZW1wU2VyaWUxKV0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHsKICAgICAgICAvL2NvbnNvbGUubG9nKCJSZXN1bHQiKQogICAgICAgIC8vY29uc29sZS5sb2cocmVzdWx0cykKICAgICAgICAvL2NvbnNvbGUubG9nKHJlc3VsdHNbMF0ubGVuZ3RoKQogICAgICAgIHRlbXBlcmF0dXJlX1NlcmllMSA9IHJlc3VsdHNbMF0ubWFwKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAvL2NvbnNvbGUubG9nKGEudGltZSkKICAgICAgICAgIC8vdmFyIGRhdGUgPSBuZXcgRGF0ZSgrKG1vbWVudChhLnRpbWUpLnVuaXgoKSkgKiAxMDAwKQogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgeDogYS50aW1lLAogICAgICAgICAgICAvLyhtb21lbnQoYS50aW1lKS51bml4KCkpKjEwMDAsCiAgICAgICAgICAgIHk6IHBhcnNlRmxvYXQoYS50ZW1wX21heCkKICAgICAgICAgIH07CiAgICAgICAgfSk7CiAgICAgICAgUHJvbWlzZS5hbGwoW190aGlzLmNsaWVudC5xdWVyeShxdWVyeV90ZW1wU2VyaWUyKV0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHsKICAgICAgICAgIHRlbXBlcmF0dXJlX1NlcmllMiA9IHJlc3VsdHNbMF0ubWFwKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIC8vdmFyIGRhdGUgPSBuZXcgRGF0ZSgrKG1vbWVudChhLnRpbWUpLnVuaXgoKSkgKiAxMDAwKQogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIHg6IGEudGltZSAtIDcyMDAsCiAgICAgICAgICAgICAgLy8obW9tZW50KGEudGltZSkudW5peCgpKSoxMDAwLAogICAgICAgICAgICAgIHk6IHBhcnNlRmxvYXQoYS50ZW1wX21pbikKICAgICAgICAgICAgfTsKICAgICAgICAgIH0pOyAvL2NvbnNvbGUubG9nKCJUZW1wZXJhdHVyZSBzZXJpZSAxIikKCiAgICAgICAgICBjb25zb2xlLmxvZyh0ZW1wZXJhdHVyZV9TZXJpZTEpOwogICAgICAgICAgdmFyIGZpbmFsZV9zZXJpZXMgPSBbewogICAgICAgICAgICBuYW1lOiAnVGVtcMOpcmF0dXJlIG1heGltYWwgZGVzIGJhY3MnLAogICAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICAgIGRhdGE6IHRlbXBlcmF0dXJlX1NlcmllMQogICAgICAgICAgfSwgewogICAgICAgICAgICBuYW1lOiAnVGVtcMOpcmF0dXJlIG1pbmltYWwgZGVzIGJhY3MnLAogICAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICAgIGRhdGE6IHRlbXBlcmF0dXJlX1NlcmllMgogICAgICAgICAgfV07IC8vY29uc29sZS5sb2coIlNlcmllIGZpbmFsZSIpCgogICAgICAgICAgY29uc29sZS5sb2coZmluYWxlX3Nlcmllcyk7CiAgICAgICAgICBfdGhpcy50ZW1wX3NlcmllcyA9IGZpbmFsZV9zZXJpZXM7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coZXJyb3IpOwogICAgICAgIH0pOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICByZXR1cm4gY29uc29sZS5sb2coZXJyb3IpOwogICAgICB9KTsKICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmxvYWREYXRhQ2hhcnQoKTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgIHRoaXMubG9hZERhdGFDaGFydCgpOwogICAgfS5iaW5kKHRoaXMpLCAzMDAwMDApOyAvL3JlZnJlc2ggcXVlcnkgdG91dGVzIGxlcyA1bWluCiAgfQp9Ow=="},{"version":3,"sources":["Temperature_amg8833.vue"],"names":[],"mappings":";;;;;;;;;;;AAQA;AACA,OAAA,MAAA,MAAA,QAAA;AACA,OAAA,2BAAA,MAAA,+BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,oBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,2BAAA,EAAA;AADA,GAFA;AAKA,EAAA,IALA,kBAKA;AACA,WAAA;AACA,MAAA,MAAA,EAAA,IAAA,MAAA,CAAA,QAAA,CAAA;AACA;AACA,QAAA,IAAA,EAAA,cAFA;AAEA;AACA,QAAA,QAAA,EAAA,gBAHA;AAIA,QAAA,IAAA,EAAA;AAJA,OAAA,CADA;AAOA,MAAA,WAAA,EAAA;AAPA,KAAA;AASA,GAfA;AAgBA,EAAA,OAAA,EAAA;AACA,IAAA,aAAA,EAAA,yBAAA;AAAA;;AACA;AACA,UAAA,kBAAA;AACA,UAAA,kBAAA;AACA,UAAA,gBAAA,GAAA,sDAAA;AACA,UAAA,gBAAA,GAAA,sDAAA,CALA,CAMA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,CACA,KAAA,MAAA,CAAA,KAAA,CAAA,gBAAA,CADA,CAAA,EAEA,IAFA,CAEA,UAAA,OAAA,EAAA;AACA;AACA;AACA;AACA,QAAA,kBAAA,GAAA,OAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,UAAA,CAAA,EAAA;AACA;AACA;AACA,iBAAA;AACA,YAAA,CAAA,EAAA,CAAA,CAAA,IADA;AACA;AACA,YAAA,CAAA,EAAA,UAAA,CAAA,CAAA,CAAA,QAAA;AAFA,WAAA;AAIA,SAPA,CAAA;AAQA,QAAA,OAAA,CAAA,GAAA,CAAA,CACA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,gBAAA,CADA,CAAA,EAEA,IAFA,CAEA,UAAA,OAAA,EAAA;AACA,UAAA,kBAAA,GAAA,OAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,UAAA,CAAA,EAAA;AACA;AACA,mBAAA;AACA,cAAA,CAAA,EAAA,CAAA,CAAA,IAAA,GAAA,IADA;AACA;AACA,cAAA,CAAA,EAAA,UAAA,CAAA,CAAA,CAAA,QAAA;AAFA,aAAA;AAIA,WANA,CAAA,CADA,CASA;;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,kBAAA;AACA,cAAA,aAAA,GAAA,CAAA;AACA,YAAA,IAAA,EAAA,8BADA;AAEA,YAAA,IAAA,EAAA,MAFA;AAGA,YAAA,IAAA,EAAA;AAHA,WAAA,EAIA;AACA,YAAA,IAAA,EAAA,8BADA;AAEA,YAAA,IAAA,EAAA,MAFA;AAGA,YAAA,IAAA,EAAA;AAHA,WAJA,CAAA,CAXA,CAoBA;;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,aAAA;AACA,UAAA,KAAA,CAAA,WAAA,GAAA,aAAA;AACA,SAzBA,EAyBA,KAzBA,CAyBA,UAAA,KAAA;AAAA,iBAAA,OAAA,CAAA,GAAA,CAAA,KAAA,CAAA;AAAA,SAzBA;AA0BA,OAxCA,EAwCA,KAxCA,CAwCA,UAAA,KAAA;AAAA,eAAA,OAAA,CAAA,GAAA,CAAA,KAAA,CAAA;AAAA,OAxCA;AAyCA;AAjDA,GAhBA;AAmEA,EAAA,OAnEA,qBAmEA;AACA,SAAA,aAAA;AACA,GArEA;AAsEA,EAAA,OAtEA,qBAsEA;AACA,IAAA,WAAA,CAAA,YAAA;AACA,WAAA,aAAA;AACA,KAFA,CAEA,IAFA,CAEA,IAFA,CAAA,EAEA,MAFA,CAAA,CADA,CAGA;AACA;AA1EA,CAAA","sourcesContent":["<template>\n    <div class=\"mt-3\">\n        <b-card border-variant=\"light\" header=\"Température des bacs\" class=\"text-center\">\n            <Temp_line_highcharts_offset :temperature-series=\"temp_series\"/>\n        </b-card>\n    </div>\n</template>\n<script>\n    //  import moment from 'moment';\n    import Influx from \"influx\";\n    import Temp_line_highcharts_offset from \"./Temp_line_HighCharts_offset\";\n\n    export default {\n        name: \"Temperature_amg883\",\n        components: {\n            Temp_line_highcharts_offset\n        },\n        data() {\n            return {\n                client: new Influx.InfluxDB({\n                    //host: '192.168.1.70', // maison\n                    host: '153.109.7.30',   //école\n                    database: 'lowimpact_food',\n                    port:8086\n                }),\n                temp_series: [],\n            }\n        },\n        methods: {\n            loadDataChart: function () {\n                //console.log(\"update temperature box charts\")\n                let temperature_Serie1;\n                let temperature_Serie2;\n                let query_tempSerie1 = 'SELECT temp_max FROM amg8833 WHERE time > now() - 7h';\n                let query_tempSerie2 = 'SELECT temp_min FROM amg8833 WHERE time > now() - 7h';\n                //console.log(\"Query:\" + query_tempSerie1)\n                Promise.all([\n                    this.client.query(query_tempSerie1),\n                ]).then(results => {\n                    //console.log(\"Result\")\n                    //console.log(results)\n                    //console.log(results[0].length)\n                    temperature_Serie1 = results[0].map(a => {\n                        //console.log(a.time)\n                        //var date = new Date(+(moment(a.time).unix()) * 1000)\n                        return {\n                            x:  a.time,//(moment(a.time).unix())*1000,\n                            y: parseFloat(a.temp_max)\n                        };\n                    });\n                    Promise.all([\n                        this.client.query(query_tempSerie2),\n                    ]).then(results => {\n                        temperature_Serie2 = results[0].map(a => {\n                            //var date = new Date(+(moment(a.time).unix()) * 1000)\n                            return {\n                                x: a.time-7200,//(moment(a.time).unix())*1000,\n                                y: parseFloat(a.temp_min)\n                            };\n                        });\n\n                        //console.log(\"Temperature serie 1\")\n                        console.log(temperature_Serie1)\n                        let finale_series = [{\n                            name: 'Température maximal des bacs',\n                            type: 'line',\n                            data: temperature_Serie1\n                        }, {\n                            name: 'Température minimal des bacs',\n                            type: 'line',\n                            data: temperature_Serie2\n                        }]\n                        //console.log(\"Serie finale\")\n                        console.log(finale_series)\n                        this.temp_series = finale_series\n                    }).catch(error => console.log(error))\n                }).catch(error => console.log(error))\n            }\n        },\n        created() {\n            this.loadDataChart()\n        },\n        mounted() {\n            setInterval(function(){\n                this.loadDataChart()\n            }.bind(this), 300000) //refresh query toutes les 5min\n        }\n    }\n</script>\n\n<style scoped>\n    .card-header{\n        background-color: lightcoral;\n        text-align: left;\n    }\n\n</style>"],"sourceRoot":"src/components"}]}