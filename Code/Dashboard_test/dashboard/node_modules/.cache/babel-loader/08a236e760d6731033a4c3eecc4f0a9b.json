{"remainingRequest":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/babel-loader/lib/index.js!/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/src/components/Temperature_amg8833.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/src/components/Temperature_amg8833.vue","mtime":1594889379634},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/philippine/Documents/TD/Code/Dashboard_test/dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvciI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBUZW1wZXJhdHVyZV9MaW5lX0VDaGFydHMgZnJvbSAiLi4vY29tcG9uZW50cy9UZW1wZXJhdHVyZV9MaW5lX0VDaGFydHMiOwppbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7CmltcG9ydCBJbmZsdXggZnJvbSAiaW5mbHV4IjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJUZW1wZXJhdHVyZV9hbWc4ODMiLAogIGNvbXBvbmVudHM6IHsKICAgIFRlbXBlcmF0dXJlX0xpbmVfRUNoYXJ0czogVGVtcGVyYXR1cmVfTGluZV9FQ2hhcnRzCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgY2xpZW50OiBuZXcgSW5mbHV4LkluZmx1eERCKHsKICAgICAgICBob3N0OiAnMTkyLjE2OC4xLjcwJywKICAgICAgICBkYXRhYmFzZTogJ2xvd2ltcGFjdF9mb29kJywKICAgICAgICBwb3J0OiA4MDg2CiAgICAgIH0pLAogICAgICB0ZW1wX3NlcmllczogW10KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBsb2FkRGF0YUNoYXJ0OiBmdW5jdGlvbiBsb2FkRGF0YUNoYXJ0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgLy9jb25zb2xlLmxvZygidXBkYXRlIHRlbXBlcmF0dXJlIGJveCBjaGFydHMiKQogICAgICB2YXIgdGVtcGVyYXR1cmVfU2VyaWUxOwogICAgICB2YXIgdGVtcGVyYXR1cmVfU2VyaWUyOwogICAgICB2YXIgcXVlcnlfdGVtcFNlcmllMSA9ICdTRUxFQ1QgdGVtcF9tYXggRlJPTSBhbWc4ODMzJzsgLy9XSEVSRSB0aW1lID4gbm93KCkgLSA3ZCc7CgogICAgICB2YXIgcXVlcnlfdGVtcFNlcmllMiA9ICdTRUxFQ1QgdGVtcF9taW4gRlJPTSBhbWc4ODMzJzsgLy8gQU5EIHRpbWUgPiBub3coKSAtIDdkJzsKICAgICAgLy9jb25zb2xlLmxvZygiUXVlcnk6IiArIHF1ZXJ5X3RlbXBTZXJpZTEpCgogICAgICBQcm9taXNlLmFsbChbdGhpcy5jbGllbnQucXVlcnkocXVlcnlfdGVtcFNlcmllMSldKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7CiAgICAgICAgLy9jb25zb2xlLmxvZygiUmVzdWx0IikKICAgICAgICAvL2NvbnNvbGUubG9nKHJlc3VsdHMpCiAgICAgICAgLy9jb25zb2xlLmxvZyhyZXN1bHRzWzBdLmxlbmd0aCkKICAgICAgICB0ZW1wZXJhdHVyZV9TZXJpZTEgPSByZXN1bHRzWzBdLm1hcChmdW5jdGlvbiAoYSkgewogICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgrbW9tZW50KGEudGltZSkudW5peCgpICogMTAwMCk7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICBuYW1lOiBkYXRlLnRvU3RyaW5nKCksCiAgICAgICAgICAgIHZhbHVlOiBbW2RhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKV0uam9pbignLycpLCBhLnRlbXBfbWF4XQogICAgICAgICAgfTsKICAgICAgICB9KTsKICAgICAgICBQcm9taXNlLmFsbChbX3RoaXMuY2xpZW50LnF1ZXJ5KHF1ZXJ5X3RlbXBTZXJpZTIpXSkudGhlbihmdW5jdGlvbiAocmVzdWx0cykgewogICAgICAgICAgdGVtcGVyYXR1cmVfU2VyaWUyID0gcmVzdWx0c1swXS5tYXAoZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgrbW9tZW50KGEudGltZSkudW5peCgpICogMTAwMCk7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgbmFtZTogZGF0ZS50b1N0cmluZygpLAogICAgICAgICAgICAgIHZhbHVlOiBbW2RhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKV0uam9pbignLycpLCBhLnRlbXBfbWluXQogICAgICAgICAgICB9OwogICAgICAgICAgfSk7IC8vY29uc29sZS5sb2coIlRlbXBlcmF0dXJlIHNlcmllIDEiKQogICAgICAgICAgLy9jb25zb2xlLmxvZyh0ZW1wZXJhdHVyZV9TZXJpZTEpCgogICAgICAgICAgdmFyIGZpbmFsZV9zZXJpZXMgPSBbewogICAgICAgICAgICBuYW1lOiAnVGVtcMOpcmF0dXJlIG1heGltYWwgZGVzIGJhY3MnLAogICAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICAgIGRhdGE6IHRlbXBlcmF0dXJlX1NlcmllMQogICAgICAgICAgfSwgewogICAgICAgICAgICBuYW1lOiAnVGVtcMOpcmF0dXJlIG1pbmltYWwgZGVzIGJhY3MnLAogICAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICAgIGRhdGE6IHRlbXBlcmF0dXJlX1NlcmllMgogICAgICAgICAgfV07IC8vY29uc29sZS5sb2coIlNlcmllIGZpbmFsZSIpCiAgICAgICAgICAvL2NvbnNvbGUubG9nKGZpbmFsZV9zZXJpZXMpCgogICAgICAgICAgX3RoaXMudGVtcF9zZXJpZXMgPSBmaW5hbGVfc2VyaWVzOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGVycm9yKTsKICAgICAgICB9KTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGVycm9yKTsKICAgICAgfSk7CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5sb2FkRGF0YUNoYXJ0KCk7CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICB0aGlzLmxvYWREYXRhQ2hhcnQoKTsKICAgIH0uYmluZCh0aGlzKSwgMzAwMDAwKTsgLy9yZWZyZXNoIHF1ZXJ5IHRvdXRlcyBsZXMgNW1pbgogIH0KfTs="},{"version":3,"sources":["Temperature_amg8833.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"mt-3\">\n        <b-card border-variant=\"light\" header=\"TempÃ©rature des bacs\" class=\"text-center\">\n            <Temperature_Line_ECharts :temperature-series=\"temp_series\"/>\n        </b-card>\n    </div>\n</template>\n<script src=\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"></script>\n<script>\n    import Temperature_Line_ECharts from \"../components/Temperature_Line_ECharts\";\n    import moment from 'moment';\n    import Influx from \"influx\";\n\n    export default {\n        name: \"Temperature_amg883\",\n        components: {\n            Temperature_Line_ECharts\n        },\n        data() {\n            return {\n                client: new Influx.InfluxDB({\n                    host: '192.168.1.70',\n                    database: 'lowimpact_food',\n                    port:8086\n                }),\n                temp_series: [],\n            }\n        },\n        methods: {\n            loadDataChart: function () {\n                //console.log(\"update temperature box charts\")\n                let temperature_Serie1;\n                let temperature_Serie2;\n                let query_tempSerie1 = 'SELECT temp_max FROM amg8833'; //WHERE time > now() - 7d';\n                let query_tempSerie2 = 'SELECT temp_min FROM amg8833';// AND time > now() - 7d';\n                //console.log(\"Query:\" + query_tempSerie1)\n                Promise.all([\n                    this.client.query(query_tempSerie1),\n                ]).then(results => {\n                    //console.log(\"Result\")\n                    //console.log(results)\n                    //console.log(results[0].length)\n                    temperature_Serie1 = results[0].map(a => {\n                        var date = new Date(+(moment(a.time).unix()) * 1000)\n                        return {\n                            name: date.toString(),\n                            value: [\n                                [date.getFullYear(), date.getMonth(), date.getDate()].join('/'),\n                                a.temp_max\n                            ]\n                        };\n                    });\n                    Promise.all([\n                        this.client.query(query_tempSerie2),\n                    ]).then(results => {\n                        temperature_Serie2 = results[0].map(a => {\n                            var date = new Date(+(moment(a.time).unix()) * 1000)\n                            return {\n                                name: date.toString(),\n                                value: [\n                                    [date.getFullYear(), date.getMonth(), date.getDate()].join('/'),\n                                    a.temp_min\n                                ]\n                            };\n                        });\n\n                        //console.log(\"Temperature serie 1\")\n                        //console.log(temperature_Serie1)\n                        let finale_series = [{\n                            name: 'TempÃ©rature maximal des bacs',\n                            type: 'line',\n                            data: temperature_Serie1\n                        }, {\n                            name: 'TempÃ©rature minimal des bacs',\n                            type: 'line',\n                            data: temperature_Serie2\n                        }]\n                        //console.log(\"Serie finale\")\n                        //console.log(finale_series)\n                        this.temp_series = finale_series\n                    }).catch(error => console.log(error))\n                }).catch(error => console.log(error))\n            }\n        },\n        created() {\n            this.loadDataChart()\n        },\n        mounted() {\n            setInterval(function(){\n                this.loadDataChart()\n            }.bind(this), 300000) //refresh query toutes les 5min\n        }\n    }\n</script>\n\n<style scoped>\n    .card-header{\n        background-color: lightcoral;\n        text-align: left;\n    }\n\n</style>"],"sourceRoot":"src/components"}]}