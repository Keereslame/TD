{"version":3,"file":"influxdb.min.js","sources":["../src/options.ts","../src/errors.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/query/FluxTableMetaData.ts","../src/query/FluxTableColumn.ts","../src/query/flux.ts","../src/Point.ts","../src/impl/Logger.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/pureJsChunkCombiner.ts","../src/impl/version.ts","../src/impl/browser/FetchTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/QueryApi.ts","../src/impl/ChunksToLines.ts","../src/util/LineSplitter.ts","../src/impl/linesToTables.ts","../src/observable/symbol.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts"],"sourcesContent":["import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write  */\n  minRetryDelay: number\n  /** maximum delay when retrying write  */\n  maxRetryDelay: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /*\n   * writeFailed is called to inform about write error\n   * @param this the instance of the API that failed\n   * @param error write error\n   * @param lines failed lines\n   * @param attempts a number of failed attempts to write the lines\n   * @return a Promise to force the API to not retry again and use the promise as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempts: number\n  ): Promise<void> | void\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by [[WriteApi]] .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = Object.freeze({\n  retryJitter: 200,\n  minRetryDelay: 1000,\n  maxRetryDelay: 15000,\n})\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = Object.freeze({\n  batchSize: 1000,\n  flushInterval: 60000,\n  writeFailed: function() {},\n  maxRetries: 2,\n  maxBufferLines: 32_000,\n  ...DEFAULT_RetryDelayStrategyOptions,\n})\n\n/**\n * Options used by [[InfluxDB]] .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Precission for write operations.\n * See https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite\n */\nexport const enum WritePrecision {\n  /** nanosecond */\n  ns = 'ns',\n  /* microsecond */\n  us = 'us',\n  /** millisecond */\n  ms = 'ms',\n  /* second */\n  s = 's',\n}\n\n/**\n * Settings that control the way of how a [[Point]] is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  defaultTags?: {[key: string]: string}\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error reason for retrying\n   * @return milliseconds\n   */\n  nextDelay(error?: Error): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @return  0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (body) {\n      this.message = `${statusCode} ${statusMessage} : ${body}`\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error to know whether a possible HTTP call can be retried.\n * @param error Test whether the givver e\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","const reEscape = /[-|\\\\{()[\\]^$+*?.]/g\nconst escapeChar = '\\\\'\n\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisend√∂rfer (felix@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\nclass Escaper {\n  private _re: RegExp\n\n  constructor(chars: string[], private wrap: string = '') {\n    const patterns = chars.join('').replace(reEscape, '\\\\$&')\n    this._re = new RegExp('[' + patterns + ']', 'g')\n  }\n\n  /**\n   * Escape replaces occurrences of special characters within the target\n   * string with the necessary escape codes.\n   */\n  public escape(val: string): string {\n    this._re.lastIndex = 0\n    let chunkIndex = this._re.lastIndex\n    let escapedVal = ''\n    let match = this._re.exec(val)\n\n    while (match) {\n      escapedVal += val.slice(chunkIndex, match.index) + escapeChar + match[0]\n      chunkIndex = this._re.lastIndex\n      match = this._re.exec(val)\n    }\n\n    if (chunkIndex === 0) {\n      return this.wrap + val + this.wrap\n    }\n\n    if (chunkIndex < val.length) {\n      return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap\n    }\n\n    return this.wrap + escapedVal + this.wrap\n  }\n}\n\nconst bindEsc = (e: Escaper): ((val: string) => string) => e.escape.bind(e)\n\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: bindEsc(new Escaper([',', ' '])),\n\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: bindEsc(new Escaper(['\"', '\\\\\\\\'], '\"')),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: bindEsc(new Escaper([',', '=', ' '])),\n}\n","import {WritePrecision} from '../options'\n\ndeclare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = Object.freeze({\n  [String(WritePrecision.s)]: seconds,\n  [String(WritePrecision.ms)]: millis,\n  [String(WritePrecision.us)]: micros,\n  [String(WritePrecision.ns)]: nanos,\n  seconds,\n  millis,\n  micros,\n  nanos,\n})\n\nexport const dateToProtocolTimestamp = {\n  [String(WritePrecision.s)]: (d: Date): string =>\n    `${Math.floor(d.getTime() / 1000)}`,\n  [String(WritePrecision.ms)]: (d: Date): string => `${d.getTime()}`,\n  [String(WritePrecision.us)]: (d: Date): string => `${d.getTime()}000`,\n  [String(WritePrecision.ns)]: (d: Date): string => `${d.getTime()}000000`,\n}\n","import FluxTableColumn, {ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: identity,\n  long: identity,\n  double: (x: string): any => +x,\n  string: identity,\n  base64Binary: identity,\n  dateTime: identity,\n  duration: identity,\n}\n/**\n * Represents metadata of a [flux table](http://bit.ly/flux-spec#table).\n */\nexport default class FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  /**\n   * Gets columns by name\n   * @param label table column or [[invalidColumn]]\n   */\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values values for each column\n   */\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] || identity)(val)\n    }\n    return acc\n  }\n}\n","/**\n * Type of query result column, see https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime'\n  | 'duration'\n\nexport interface FluxTableColumnLike {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType?: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group?: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue?: string\n}\n/**\n * Column metadata of a [flux table](http://bit.ly/flux-spec#table).\n */\nexport default class FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in the row array\n   * @return index\n   */\n  index: number\n\n  /**\n   * Creates a flux table column from an object supplied.\n   * @param object\n   */\n  static from(object: FluxTableColumnLike): FluxTableColumn {\n    const retVal = new FluxTableColumn()\n    retVal.label = object.label\n    retVal.dataType = object.dataType as ColumnType\n    retVal.group = Boolean(object.group)\n    retVal.defaultValue = object.defaultValue || ''\n    return retVal\n  }\n}\n","export const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value string value\n * @return sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = String(value)\n  for (const c of val) {\n    if (c < '0' || c > '9') throw new Error(`not a flux integer: ${val}`)\n  }\n  return new FluxParameter(val)\n}\n\nexport function sanitizeFloat(value: any): string {\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n    }\n    if (c !== '.' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value parameter value\n * @return sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (\n    typeof value === 'object' &&\n    typeof value[FLUX_VALUE] === 'function'\n  ) {\n    return value[FLUX_VALUE]()\n  } else if (value instanceof Date) {\n    return value.toISOString()\n  } else if (value instanceof RegExp) {\n    return sanitizeRegExp(value)\n  }\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && (!values || values.length === 0)) return strings[0] // the simplest case\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          throw new Error(\n            `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n          )\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","import {escape} from './util/escape'\nimport {PointSettings} from './options'\n/**\n * Point defines the values that will be written to the database.\n * See [Go Implementation](http://bit.ly/influxdata-point)\n */\nexport default class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  private fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName the measurement name\n   * @return new instance of {@link Point}\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name measurement name\n   * @return new instance of {@link Point}\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name  tag name\n   * @param value tag value\n   * @return this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field field name\n   * @param value field value\n   * @return this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point time. A string or number value can be used\n   * to carry an int64 value of a precision that depends\n   * on WriteApi, nanoseconds by default. An undefined value\n   * generates a local timestamp using the client's clock.\n   * An empty string can be used to let the server assign\n   * the timestamp.\n   *\n   * @param value point time\n   * @return this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  public toLineProtocol(settings?: PointSettings): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = Object.freeze({\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n})\nlet provider: Logger = consoleLogger\n\nconst Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger new logger\n * @return previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n\nexport default Logger\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return Math.min(\n        delay + Math.round(Math.random() * this.options.retryJitter),\n        this.options.maxRetryDelay\n      )\n    } else {\n      if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * 2, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy\n * @param options retry options\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import Logger from './Logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  WritePrecision,\n  DEFAULT_WriteOptions,\n  PointSettings,\n  WriteOptions,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport Logger from './Logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport Point from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi, PointSettings {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'text/plain; charset=utf-8',\n    },\n  }\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecision,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        this.transport.send(this.httpPath, lines.join('\\n'), this.sendOptions, {\n          error(error: Error): void {\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              self.writeOptions.maxRetries + 2 - attempts\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to influx DB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error)\n              )\n              reject(error)\n              return\n            }\n            Logger.error(`Write to influx DB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            self.retryStrategy.success()\n            resolve()\n          },\n        })\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    for (let i = 0; i < points.length; i++) {\n      this.writePoint(points[i])\n    }\n  }\n  async flush(): Promise<void> {\n    await this.writeBuffer.flush()\n    return await this.retryBuffer.flush()\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): void {\n    this._clearFlushTimeout()\n    this.closed = true\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      // Logger.warn(`unsupported timestamp value: ${value}`)\n      return String(value)\n    }\n  }\n}\n","import {ChunkCombiner} from '../transport'\n\nconst pureJsChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    const retVal = new Uint8Array(first.length + second.length)\n    retVal.set(first)\n    retVal.set(second, first.length)\n    return retVal\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    // see https://en.wikipedia.org/wiki/UTF-8 for details\n    let c1, c2, c3, c4\n    let out = ''\n    let i = start\n    while (i < end) {\n      c1 = chunk[i++]\n      switch (c1 >> 4) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n          // 0xxxxxxx\n          out += String.fromCharCode(c1)\n          break\n        case 12:\n        case 13:\n          // 110x xxxx   10xx xxxx\n          c2 = chunk[i++]\n          out += String.fromCharCode(((c1 & 0x1f) << 6) | (c2 & 0x3f))\n          break\n        case 14:\n          // 1110 xxxx  10xx xxxx  10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          out += String.fromCharCode(\n            ((c1 & 0x0f) << 12) | ((c2 & 0x3f) << 6) | (c3 & 0x3f)\n          )\n          break\n        case 15:\n          // 1111 0xxx  10xx xxxx  10xx xxxx 10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          c4 = chunk[i++]\n          out += String.fromCodePoint(\n            ((c1 & 0x07) << 18) |\n              ((c2 & 0x3f) << 12) |\n              ((c3 & 0x3f) << 6) |\n              (c4 & 0x3f)\n          )\n          break\n      }\n    }\n    return out\n  },\n\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = new Uint8Array(end - start)\n    retVal.set(chunk.slice(start, end))\n    return retVal\n  },\n}\n\nexport default pureJsChunkCombiner\n","export const CLIENT_LIB_VERSION = '1.4.0'\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Transport,\n  SendOptions,\n  CommunicationObserver,\n  Headers,\n} from '../../transport'\nimport pureJsChunkCombiner from '../pureJsChunkCombiner'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport Logger from '../Logger'\nimport {CLIENT_LIB_VERSION} from '../version'\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner = pureJsChunkCombiner\n  private defaultHeaders: {[key: string]: string}\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`,\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    if (callbacks && callbacks.useCancellable && !(options as any).signal) {\n      const controller = new AbortController()\n      const signal = controller.signal\n      callbacks.useCancellable({\n        cancel() {\n          controller.abort()\n        },\n        isCancelled() {\n          return signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async response => {\n        if (callbacks?.responseStarted) {\n          const headers: Headers = {}\n          response.headers.forEach((value: string, key: string) => {\n            const previous = headers[key]\n            if (previous === undefined) {\n              headers[key] = value\n            } else if (Array.isArray(previous)) {\n              previous.push(value)\n            } else {\n              headers[key] = [previous, value]\n            }\n          })\n          observer.responseStarted(headers)\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Logger.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch(e => observer.error(e))\n      .finally(() => observer.complete())\n  }\n  async request(path: string, body: any, options: SendOptions): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n\n    let data = undefined\n    try {\n      if (responseContentType.includes('json')) {\n        data = await response.json()\n      } else if (responseContentType.includes('text')) {\n        data = await response.text()\n      }\n    } catch (_e) {\n      // ignore\n      Logger.warn('Unable to read error body', _e)\n    }\n    if (status >= 300) {\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after')\n      )\n    }\n    return data\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    return fetch(`${this.connectionOptions.url}${path}`, {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as 'omit',\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    })\n  }\n}\n","import {CommunicationObserver, Headers} from '../transport'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers): void => {\n      if (callbacks.responseStarted) callbacks.responseStarted(headers)\n    },\n  }\n  return retVal\n}\n","import {Observable} from './observable'\nimport {\n  FluxResultObserver,\n  FluxTableMetaData,\n  ParameterizedQuery,\n} from './query'\nimport {CommunicationObserver} from './transport'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\nexport interface QueryOptions {\n  /**\n   * Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably.\n   */\n  org: string\n  /**\n   * Type of the query, default is \"flux\"\n   */\n  type?: 'flux'\n  /**\n   * Requests gzip encoded response.\n   */\n  gzip?: boolean\n  /**\n   * Specifies the time that should be reported as \"now\" in the query. RFC3339 value must be returned,\n   * for example `new Date().toISOString()`.\n   */\n  now?: () => string\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n\n/**\n * Query InfluxDB 2.0. Provides methods that notify abouts result lines of the executed query.\n * See https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery\n */\nexport default interface QueryApi {\n  /**\n   * Adds extra options for this query API.\n   * @param options\n   * @return this\n   */\n  with(options: Partial<QueryOptions>): QueryApi\n\n  /**\n   * Creates a cold observable of the lines returned by the given query.\n   *\n   * @param query query\n   */\n  lines(query: string | ParameterizedQuery): Observable<string>\n\n  /**\n   * Creates a cold observable of the rows returned by the given query.\n   *\n   * @param query query\n   */\n  rows(query: string | ParameterizedQuery): Observable<Row>\n\n  /**\n   * Executes the query and receives result lines (including empty and annotation lines)\n   * through the supplied consumer. See [annotated-csv](https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/).\n   *\n   * @param query query\n   * @param consumer data/error consumer\n   */\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void\n\n  /**\n   * Executes the query and receives table metadata and rows through the supplied consumer.\n   *\n   * @param query query\n   * @param consumer data/error consumer\n   */\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void\n\n  /**\n   * CollectRows executes the query and collects all the results in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of results is copied to memory.\n   *\n   * @param query query\n   * @param rowMapper maps the supplied row to an item that is then collected,\n   *  undefined return values are not collected. If no rowMapper is supplied,\n   *  `row => row.tableMeta.toObject(row.values)` is used.\n   */\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>>\n\n  /**\n   * CollectLines executes the query and collects all result lines in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of lines is copied to memory.\n   *\n   * @param query query\n   */\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>>\n}\n","import {CommunicationObserver, ChunkCombiner} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\n/**\n * Converts lines to table calls\n */\nexport default class ChunksToLines implements CommunicationObserver<any> {\n  previous?: Uint8Array\n  finished = false\n\n  constructor(\n    private target: CommunicationObserver<string>,\n    private chunks: ChunkCombiner\n  ) {}\n\n  next(chunk: Uint8Array): void {\n    if (this.finished) return\n    try {\n      this.bufferReceived(chunk)\n    } catch (e) {\n      this.error(e)\n    }\n  }\n  error(error: Error): void {\n    if (!this.finished) {\n      this.finished = true\n      this.target.error(error)\n    }\n  }\n  complete(): void {\n    if (!this.finished) {\n      if (this.previous) {\n        this.target.next(\n          this.chunks.toUtf8String(this.previous, 0, this.previous.length)\n        )\n      }\n      this.finished = true\n      this.target.complete()\n    }\n  }\n  useCancellable(cancellable: Cancellable): void {\n    this.target.useCancellable && this.target.useCancellable(cancellable)\n  }\n\n  private bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (this.previous) {\n      chunk = this.chunks.concat(this.previous, chunk)\n      index = (this.previous as Buffer).length\n    } else {\n      index = 0\n    }\n    let quoted = false\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          this.target.next(this.chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      this.previous = this.chunks.copy(chunk, start, index)\n    } else {\n      this.previous = undefined\n    }\n  }\n}\n","const SEPARATOR = ','\nconst WRAPPER = '\"'\n\n/**\n * Optimized tokenizer of a single CSV line.\n */\nexport default class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   * @param line\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line line\n   * @return\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === SEPARATOR) {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === WRAPPER) {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","import {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport LineSplitter from '../util/LineSplitter'\nimport FluxTableColumn, {ColumnType} from '../query/FluxTableColumn'\nimport FluxTableMetaData from '../query/FluxTableMetaData'\n\nexport function toLineObserver(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = new FluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = new FluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport QueryApi, {QueryOptions, Row, defaultRowMapping} from '../QueryApi'\nimport {CommunicationObserver, Transport} from '../transport'\nimport ChunksToLines from './ChunksToLines'\nimport {toLineObserver} from './linesToTables'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\nimport {ParameterizedQuery} from '../query/flux'\nimport {FluxTableMetaData} from '../query'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string) {\n    this.options = {org}\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    this.options = {...this.options, ...options}\n    return this\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return toLineObserver({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    this.createExecutor(query)(toLineObserver(consumer))\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.queryRows(query, {\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.queryLines(query, {\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): QueryExecutor {\n    const {org, type, gzip} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n          },\n        },\n        new ChunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type || 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WritePrecision, WriteOptions} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 client that uses HTTP API described in https://v2.docs.influxdata.com/v2.0/reference/api/ .\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport || new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates [[WriteApi]] for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @param org Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket The destination bucket for writes.\n   * @param precision Timestamp precision for line items.\n   * @param writeOptions Custom write options.\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecision = WritePrecision.ns,\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions || this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates [[QueryAPI]] for the supplied organization .\n   *\n   * @param org organization\n   * @return query api instance\n   */\n  getQueryApi(org: string): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n"],"names":["DEFAULT_RetryDelayStrategyOptions","Object","freeze","retryJitter","minRetryDelay","maxRetryDelay","DEFAULT_WriteOptions","batchSize","flushInterval","writeFailed","maxRetries","maxBufferLines","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","message","_super","setPrototypeOf","_this","IllegalArgumentError","prototype","__extends","Error","statusMessage","body","retryAfter","HttpError","setRetryAfter","test","this","_retryAfter","parseInt","RETRY_CODES","getRetryDelay","error","retVal","Math","round","random","RequestTimedOutError","name","AbortError","reEscape","chars","wrap","patterns","join","replace","_re","RegExp","Escaper","val","lastIndex","chunkIndex","escapedVal","match","exec","slice","index","length","bindEsc","e","escape","bind","measurement","quoted","tag","lastMillis","Date","now","stepsInMillis","nanos","millis_2","nanos_2","String","substr","micros","millis","seconds","floor","currentTime","_a","dateToProtocolTimestamp","d","getTime","_b","identity","x","typeSerializers","boolean","unsignedLong","long","double","string","base64Binary","dateTime","duration","columns","forEach","col","i","FluxTableMetaData","label","values","acc","column","defaultValue","dataType","FluxTableColumn","object","group","Boolean","FLUX_VALUE","Symbol","fluxValue","FluxParameter","sanitizeString","value","toString","undefined","prepareRetVal","substring","c","charAt","sanitizeFloat","dot","val_2","_i","sanitizeRegExp","fluxExpression","toFluxValue","toISOString","measurementName","Point","tags","fields","isNaN","parseFloat","time","settings","fieldsLine","keys","sort","tagsLine","defaultTags","convertTime","line","toLineProtocol","JSON","stringify","provider","console","warn","Logger","options","success","RetryStrategyImpl","delay","min","currentDelay","max","maxLines","retryLines","RetryBuffer","lines","retryCount","closed","retryTime","nextRetryTime","first","size","origSize","newSize","newFirst","next","toAdd","last","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","clearTimeout","maxChunkRecords","flushFn","scheduleSend","Array","WriteBuffer","record","flush","reset","Promise","resolve","transport","org","bucket","precision","writeOptions","method","headers","content-type","httpPath","encodeURIComponent","writeBuffer","_clearFlushTimeout","sendBatch","retryStrategy","retryBuffer","WriteApiImpl","attempts","self","reject","send","sendOptions","onRetry","call","addLines","nextDelay","complete","add","records","point","points","writePoint","finally","remaining","close","key","pureJsChunkCombiner","concat","second","Uint8Array","set","toUtf8String","chunk","start","end","c1","c2","c3","c4","out","fromCharCode","fromCodePoint","copy","connectionOptions","defaultHeaders","User-Agent","token","FetchTransport","path","callbacks","observer","state","data","responseStarted","completeCommunicationObserver","useCancellable","signal","controller_1","AbortController","signal_1","cancel","abort","isCancelled","aborted","fetch","response","headers_1","previous","isArray","push","status","text","statusText","get","reader","getReader","read","done","arrayBuffer","buffer","TextEncoder","encode","responseContentType","json","_e_1","other","url","credentials","defaultRowMapping","tableMeta","toObject","target","chunks","ChunksToLines","finished","bufferReceived","cancellable","LineSplitter","_reuse","reusedValues","reuse","lastSplitLength","quoteCount","startIndex","count","val_1","getValue","toLineObserver","consumer","lastMeta","splitter","withReuse","expectMeta","firstColumnIndex","splitLine","startsWith","symbolObservable","observable","executor","isClosed","QuerySubscription","noop","decorator","ObservableQuery","observerOrNext","completeObserver","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","query","createExecutor","rowMapper","queryRows","queryLines","type","gzip","decorateRequest","dialect","accept-encoding","chunkCombiner","request","_options","endsWith","TransportImpl","InfluxDB","timeout","canRetry","code","strings","parts","partIndex","sanitized","sanitizeDateTime","use"],"mappings":"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"}