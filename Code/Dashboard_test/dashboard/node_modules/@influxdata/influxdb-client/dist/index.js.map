{"version":3,"file":"index.js","sources":["../src/options.ts","../src/errors.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/query/FluxTableMetaData.ts","../src/query/FluxTableColumn.ts","../src/query/flux.ts","../src/impl/Logger.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/node/nodeChunkCombiner.ts","../src/impl/version.ts","../src/impl/node/NodeHttpTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/QueryApi.ts","../src/impl/ChunksToLines.ts","../src/util/LineSplitter.ts","../src/impl/linesToTables.ts","../src/observable/symbol.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts","../src/Point.ts"],"sourcesContent":["import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write  */\n  minRetryDelay: number\n  /** maximum delay when retrying write  */\n  maxRetryDelay: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /*\n   * writeFailed is called to inform about write error\n   * @param this the instance of the API that failed\n   * @param error write error\n   * @param lines failed lines\n   * @param attempts a number of failed attempts to write the lines\n   * @return a Promise to force the API to not retry again and use the promise as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempts: number\n  ): Promise<void> | void\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by [[WriteApi]] .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = Object.freeze({\n  retryJitter: 200,\n  minRetryDelay: 1000,\n  maxRetryDelay: 15000,\n})\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = Object.freeze({\n  batchSize: 1000,\n  flushInterval: 60000,\n  writeFailed: function() {},\n  maxRetries: 2,\n  maxBufferLines: 32_000,\n  ...DEFAULT_RetryDelayStrategyOptions,\n})\n\n/**\n * Options used by [[InfluxDB]] .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Precission for write operations.\n * See https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite\n */\nexport const enum WritePrecision {\n  /** nanosecond */\n  ns = 'ns',\n  /* microsecond */\n  us = 'us',\n  /** millisecond */\n  ms = 'ms',\n  /* second */\n  s = 's',\n}\n\n/**\n * Settings that control the way of how a [[Point]] is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  defaultTags?: {[key: string]: string}\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error reason for retrying\n   * @return milliseconds\n   */\n  nextDelay(error?: Error): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @return  0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (body) {\n      this.message = `${statusCode} ${statusMessage} : ${body}`\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error to know whether a possible HTTP call can be retried.\n * @param error Test whether the givver e\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","const reEscape = /[-|\\\\{()[\\]^$+*?.]/g\nconst escapeChar = '\\\\'\n\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisend√∂rfer (felix@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\nclass Escaper {\n  private _re: RegExp\n\n  constructor(chars: string[], private wrap: string = '') {\n    const patterns = chars.join('').replace(reEscape, '\\\\$&')\n    this._re = new RegExp('[' + patterns + ']', 'g')\n  }\n\n  /**\n   * Escape replaces occurrences of special characters within the target\n   * string with the necessary escape codes.\n   */\n  public escape(val: string): string {\n    this._re.lastIndex = 0\n    let chunkIndex = this._re.lastIndex\n    let escapedVal = ''\n    let match = this._re.exec(val)\n\n    while (match) {\n      escapedVal += val.slice(chunkIndex, match.index) + escapeChar + match[0]\n      chunkIndex = this._re.lastIndex\n      match = this._re.exec(val)\n    }\n\n    if (chunkIndex === 0) {\n      return this.wrap + val + this.wrap\n    }\n\n    if (chunkIndex < val.length) {\n      return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap\n    }\n\n    return this.wrap + escapedVal + this.wrap\n  }\n}\n\nconst bindEsc = (e: Escaper): ((val: string) => string) => e.escape.bind(e)\n\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: bindEsc(new Escaper([',', ' '])),\n\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: bindEsc(new Escaper(['\"', '\\\\\\\\'], '\"')),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: bindEsc(new Escaper([',', '=', ' '])),\n}\n","import {WritePrecision} from '../options'\n\ndeclare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = Object.freeze({\n  [String(WritePrecision.s)]: seconds,\n  [String(WritePrecision.ms)]: millis,\n  [String(WritePrecision.us)]: micros,\n  [String(WritePrecision.ns)]: nanos,\n  seconds,\n  millis,\n  micros,\n  nanos,\n})\n\nexport const dateToProtocolTimestamp = {\n  [String(WritePrecision.s)]: (d: Date): string =>\n    `${Math.floor(d.getTime() / 1000)}`,\n  [String(WritePrecision.ms)]: (d: Date): string => `${d.getTime()}`,\n  [String(WritePrecision.us)]: (d: Date): string => `${d.getTime()}000`,\n  [String(WritePrecision.ns)]: (d: Date): string => `${d.getTime()}000000`,\n}\n","import FluxTableColumn, {ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: identity,\n  long: identity,\n  double: (x: string): any => +x,\n  string: identity,\n  base64Binary: identity,\n  dateTime: identity,\n  duration: identity,\n}\n/**\n * Represents metadata of a [flux table](http://bit.ly/flux-spec#table).\n */\nexport default class FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  /**\n   * Gets columns by name\n   * @param label table column or [[invalidColumn]]\n   */\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values values for each column\n   */\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] || identity)(val)\n    }\n    return acc\n  }\n}\n","/**\n * Type of query result column, see https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime'\n  | 'duration'\n\nexport interface FluxTableColumnLike {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType?: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group?: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue?: string\n}\n/**\n * Column metadata of a [flux table](http://bit.ly/flux-spec#table).\n */\nexport default class FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in the row array\n   * @return index\n   */\n  index: number\n\n  /**\n   * Creates a flux table column from an object supplied.\n   * @param object\n   */\n  static from(object: FluxTableColumnLike): FluxTableColumn {\n    const retVal = new FluxTableColumn()\n    retVal.label = object.label\n    retVal.dataType = object.dataType as ColumnType\n    retVal.group = Boolean(object.group)\n    retVal.defaultValue = object.defaultValue || ''\n    return retVal\n  }\n}\n","export const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value string value\n * @return sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = String(value)\n  for (const c of val) {\n    if (c < '0' || c > '9') throw new Error(`not a flux integer: ${val}`)\n  }\n  return new FluxParameter(val)\n}\n\nexport function sanitizeFloat(value: any): string {\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n    }\n    if (c !== '.' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value parameter value\n * @return sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (\n    typeof value === 'object' &&\n    typeof value[FLUX_VALUE] === 'function'\n  ) {\n    return value[FLUX_VALUE]()\n  } else if (value instanceof Date) {\n    return value.toISOString()\n  } else if (value instanceof RegExp) {\n    return sanitizeRegExp(value)\n  }\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && (!values || values.length === 0)) return strings[0] // the simplest case\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          throw new Error(\n            `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n          )\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = Object.freeze({\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n})\nlet provider: Logger = consoleLogger\n\nconst Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger new logger\n * @return previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n\nexport default Logger\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return Math.min(\n        delay + Math.round(Math.random() * this.options.retryJitter),\n        this.options.maxRetryDelay\n      )\n    } else {\n      if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * 2, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy\n * @param options retry options\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import Logger from './Logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  WritePrecision,\n  DEFAULT_WriteOptions,\n  PointSettings,\n  WriteOptions,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport Logger from './Logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport Point from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi, PointSettings {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'text/plain; charset=utf-8',\n    },\n  }\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecision,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        this.transport.send(this.httpPath, lines.join('\\n'), this.sendOptions, {\n          error(error: Error): void {\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              self.writeOptions.maxRetries + 2 - attempts\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to influx DB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error)\n              )\n              reject(error)\n              return\n            }\n            Logger.error(`Write to influx DB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            self.retryStrategy.success()\n            resolve()\n          },\n        })\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    for (let i = 0; i < points.length; i++) {\n      this.writePoint(points[i])\n    }\n  }\n  async flush(): Promise<void> {\n    await this.writeBuffer.flush()\n    return await this.retryBuffer.flush()\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): void {\n    this._clearFlushTimeout()\n    this.closed = true\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      // Logger.warn(`unsupported timestamp value: ${value}`)\n      return String(value)\n    }\n  }\n}\n","import {ChunkCombiner} from '../../transport'\nimport {Buffer} from 'buffer'\n\nconst nodeChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    return Buffer.concat([first, second])\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    return (chunk as Buffer).toString('utf-8', start, end)\n  },\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = Buffer.allocUnsafe(end - start)\n    ;(chunk as Buffer).copy(retVal, 0, start, end)\n    return retVal\n  },\n}\n\nexport default nodeChunkCombiner\n","export const CLIENT_LIB_VERSION = '1.4.0'\n","import {ConnectionOptions, DEFAULT_ConnectionOptions} from '../../options'\nimport {parse} from 'url'\nimport * as http from 'http'\nimport * as https from 'https'\nimport {Buffer} from 'buffer'\nimport {RequestTimedOutError, AbortError, HttpError} from '../../errors'\nimport {\n  CommunicationObserver,\n  Transport,\n  SendOptions,\n  Headers,\n  ChunkCombiner,\n} from '../../transport'\nimport Cancellable from '../../util/Cancellable'\nimport nodeChunkCombiner from './nodeChunkCombiner'\nimport zlib from 'zlib'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {CLIENT_LIB_VERSION} from '../version'\n\nconst zlibOptions = {\n  flush: zlib.Z_SYNC_FLUSH,\n  finishFlush: zlib.Z_SYNC_FLUSH,\n}\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\nclass CancellableImpl implements Cancellable {\n  private cancelled = false\n  cancel(): void {\n    this.cancelled = true\n  }\n  isCancelled(): boolean {\n    return this.cancelled\n  }\n}\n\n/**\n * Transport layer on top of node http or https library.\n */\nexport class NodeHttpTransport implements Transport {\n  /* required transport member */\n  readonly chunkCombiner: ChunkCombiner = nodeChunkCombiner\n\n  private defaultOptions: {[key: string]: any}\n  private requestApi: (\n    options: http.RequestOptions,\n    callback: (res: http.IncomingMessage) => void\n  ) => http.ClientRequest\n  /**\n   * Creates a node transport using for the client options supplied.\n   * @param connectionOptions client options\n   */\n  constructor(private connectionOptions: ConnectionOptions) {\n    const url = parse(connectionOptions.url)\n    this.defaultOptions = {\n      ...DEFAULT_ConnectionOptions,\n      ...connectionOptions,\n      ...connectionOptions.transportOptions,\n      port: url.port,\n      protocol: url.protocol,\n      hostname: url.hostname,\n    }\n    if (url.protocol === 'http:') {\n      this.requestApi = http.request\n    } else if (url.protocol === 'https:') {\n      this.requestApi = https.request\n    } else {\n      throw new Error(\n        `Unsupported protocol \"${url.protocol} in URL: \"${connectionOptions.url}\"`\n      )\n    }\n  }\n\n  /**\n   * Sends data to server and receives communication events via communication callbacks.\n   *\n   * @param path HTTP path\n   * @param body  message body\n   * @param headers HTTP headers\n   * @param method HTTP method\n   * @param callbacks communication callbacks\n   * @return a handle that can cancel the communication\n   */\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<any>>\n  ): void {\n    const message = this.createRequestMessage(path, body, options)\n    const cancellable = new CancellableImpl()\n    if (callbacks && callbacks.useCancellable)\n      callbacks.useCancellable(cancellable)\n    this._request(message, cancellable, callbacks)\n  }\n\n  /**\n   * Sends data to the server and receives decoded result. The type of the result depends on\n   * response's content-type (deserialized json, text).\n  \n   * @param path HTTP path\n   * @param requestBody  request body\n   * @param options  send options\n   */\n  request(path: string, body: any, options: SendOptions): Promise<any> {\n    if (!body) {\n      body = ''\n    } else if (typeof body !== 'string') {\n      body = JSON.stringify(body)\n    }\n    let buffer = emptyBuffer\n    let contentType: string\n    return new Promise((resolve, reject) => {\n      this.send(path, body as string, options, {\n        responseStarted(headers: Headers) {\n          contentType = String(headers['content-type'])\n        },\n        next: (data: Uint8Array): void => {\n          buffer = Buffer.concat([buffer, data])\n        },\n        complete: (): void => {\n          try {\n            if (contentType.includes('json')) {\n              resolve(JSON.parse(buffer.toString('utf8')))\n            } else if (contentType.includes('text')) {\n              resolve(buffer.toString('utf8'))\n            } else {\n              resolve(buffer)\n            }\n          } catch (e) {\n            reject(e)\n          }\n        },\n        error: (e: Error): void => {\n          reject(e)\n        },\n      })\n    })\n  }\n\n  /**\n   * Creates configuration for a specific request.\n   *\n   * @param path API path starting with '/' and containing also query parameters\n   * @param headers HTTP headers to use\n   * @param method HTTP method\n   * @param body request body, will be utf-8 encoded\n   * @return configuration suitable for making the request\n   */\n  private createRequestMessage(\n    path: string,\n    body: string,\n    sendOptions: SendOptions\n  ): {[key: string]: any} {\n    const bodyBuffer = Buffer.from(body, 'utf-8')\n    const headers: {[key: string]: any} = {\n      'content-type': 'application/json; charset=utf-8',\n      'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`,\n    }\n    if (this.connectionOptions.token) {\n      headers.authorization = 'Token ' + this.connectionOptions.token\n    }\n    const options: {[key: string]: any} = {\n      ...this.defaultOptions,\n      path,\n      method: sendOptions.method,\n      headers: {\n        ...headers,\n        ...sendOptions.headers,\n      },\n      body: bodyBuffer,\n    }\n    options.headers['content-length'] = bodyBuffer.length\n\n    return options\n  }\n\n  private _request(\n    requestMessage: {[key: string]: any},\n    cancellable: CancellableImpl,\n    callbacks?: Partial<CommunicationObserver<any>>\n  ): void {\n    const listeners = completeCommunicationObserver(callbacks)\n    if (cancellable.isCancelled()) {\n      listeners.complete()\n      return\n    }\n    const req = this.requestApi(requestMessage, (res: http.IncomingMessage) => {\n      if (cancellable.isCancelled()) {\n        res.resume()\n        listeners.complete()\n        return\n      }\n      res.on('aborted', () => {\n        listeners.error(new AbortError())\n      })\n      listeners.responseStarted(res.headers)\n      const statusCode =\n        res.statusCode || /* istanbul ignore next safety check */ 600\n      const contentEncoding = res.headers['content-encoding']\n      let responseData\n      if (contentEncoding === 'gzip') {\n        responseData = zlib.createGunzip(zlibOptions)\n        res.pipe(responseData)\n      } else {\n        responseData = res\n      }\n      responseData.on('error', listeners.error)\n      if (statusCode >= 300) {\n        let body = ''\n        responseData.on('data', s => {\n          body += s.toString()\n          if (body.length > 1000) {\n            body = body.slice(0, 1000)\n            res.resume()\n          }\n        })\n        responseData.on('end', () =>\n          listeners.error(\n            new HttpError(\n              statusCode,\n              res.statusMessage,\n              body,\n              res.headers['retry-after']\n            )\n          )\n        )\n      } else {\n        responseData.on('data', data => {\n          if (cancellable.isCancelled()) {\n            res.resume()\n          } else {\n            listeners.next(data)\n          }\n        })\n        responseData.on('end', listeners.complete)\n      }\n    })\n    // Support older Nodes which don't allow .timeout() in the\n    // request options\n    /* istanbul ignore else support older node versions */\n    if (typeof req.setTimeout === 'function') {\n      req.setTimeout(requestMessage.timeout)\n    }\n\n    req.on('timeout', () => {\n      listeners.error(new RequestTimedOutError())\n    })\n    req.on('error', error => {\n      listeners.error(error)\n    })\n    req.on('close', listeners.complete)\n\n    /* istanbul ignore else support older node versions */\n    if (requestMessage.body) {\n      req.write(requestMessage.body)\n    }\n    req.end()\n  }\n}\nexport default NodeHttpTransport\n","import {CommunicationObserver, Headers} from '../transport'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers): void => {\n      if (callbacks.responseStarted) callbacks.responseStarted(headers)\n    },\n  }\n  return retVal\n}\n","import {Observable} from './observable'\nimport {\n  FluxResultObserver,\n  FluxTableMetaData,\n  ParameterizedQuery,\n} from './query'\nimport {CommunicationObserver} from './transport'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\nexport interface QueryOptions {\n  /**\n   * Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably.\n   */\n  org: string\n  /**\n   * Type of the query, default is \"flux\"\n   */\n  type?: 'flux'\n  /**\n   * Requests gzip encoded response.\n   */\n  gzip?: boolean\n  /**\n   * Specifies the time that should be reported as \"now\" in the query. RFC3339 value must be returned,\n   * for example `new Date().toISOString()`.\n   */\n  now?: () => string\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n\n/**\n * Query InfluxDB 2.0. Provides methods that notify abouts result lines of the executed query.\n * See https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery\n */\nexport default interface QueryApi {\n  /**\n   * Adds extra options for this query API.\n   * @param options\n   * @return this\n   */\n  with(options: Partial<QueryOptions>): QueryApi\n\n  /**\n   * Creates a cold observable of the lines returned by the given query.\n   *\n   * @param query query\n   */\n  lines(query: string | ParameterizedQuery): Observable<string>\n\n  /**\n   * Creates a cold observable of the rows returned by the given query.\n   *\n   * @param query query\n   */\n  rows(query: string | ParameterizedQuery): Observable<Row>\n\n  /**\n   * Executes the query and receives result lines (including empty and annotation lines)\n   * through the supplied consumer. See [annotated-csv](https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/).\n   *\n   * @param query query\n   * @param consumer data/error consumer\n   */\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void\n\n  /**\n   * Executes the query and receives table metadata and rows through the supplied consumer.\n   *\n   * @param query query\n   * @param consumer data/error consumer\n   */\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void\n\n  /**\n   * CollectRows executes the query and collects all the results in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of results is copied to memory.\n   *\n   * @param query query\n   * @param rowMapper maps the supplied row to an item that is then collected,\n   *  undefined return values are not collected. If no rowMapper is supplied,\n   *  `row => row.tableMeta.toObject(row.values)` is used.\n   */\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>>\n\n  /**\n   * CollectLines executes the query and collects all result lines in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of lines is copied to memory.\n   *\n   * @param query query\n   */\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>>\n}\n","import {CommunicationObserver, ChunkCombiner} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\n/**\n * Converts lines to table calls\n */\nexport default class ChunksToLines implements CommunicationObserver<any> {\n  previous?: Uint8Array\n  finished = false\n\n  constructor(\n    private target: CommunicationObserver<string>,\n    private chunks: ChunkCombiner\n  ) {}\n\n  next(chunk: Uint8Array): void {\n    if (this.finished) return\n    try {\n      this.bufferReceived(chunk)\n    } catch (e) {\n      this.error(e)\n    }\n  }\n  error(error: Error): void {\n    if (!this.finished) {\n      this.finished = true\n      this.target.error(error)\n    }\n  }\n  complete(): void {\n    if (!this.finished) {\n      if (this.previous) {\n        this.target.next(\n          this.chunks.toUtf8String(this.previous, 0, this.previous.length)\n        )\n      }\n      this.finished = true\n      this.target.complete()\n    }\n  }\n  useCancellable(cancellable: Cancellable): void {\n    this.target.useCancellable && this.target.useCancellable(cancellable)\n  }\n\n  private bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (this.previous) {\n      chunk = this.chunks.concat(this.previous, chunk)\n      index = (this.previous as Buffer).length\n    } else {\n      index = 0\n    }\n    let quoted = false\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          this.target.next(this.chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      this.previous = this.chunks.copy(chunk, start, index)\n    } else {\n      this.previous = undefined\n    }\n  }\n}\n","const SEPARATOR = ','\nconst WRAPPER = '\"'\n\n/**\n * Optimized tokenizer of a single CSV line.\n */\nexport default class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   * @param line\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line line\n   * @return\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === SEPARATOR) {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === WRAPPER) {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","import {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport LineSplitter from '../util/LineSplitter'\nimport FluxTableColumn, {ColumnType} from '../query/FluxTableColumn'\nimport FluxTableMetaData from '../query/FluxTableMetaData'\n\nexport function toLineObserver(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = new FluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = new FluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport QueryApi, {QueryOptions, Row, defaultRowMapping} from '../QueryApi'\nimport {CommunicationObserver, Transport} from '../transport'\nimport ChunksToLines from './ChunksToLines'\nimport {toLineObserver} from './linesToTables'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\nimport {ParameterizedQuery} from '../query/flux'\nimport {FluxTableMetaData} from '../query'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string) {\n    this.options = {org}\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    this.options = {...this.options, ...options}\n    return this\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return toLineObserver({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    this.createExecutor(query)(toLineObserver(consumer))\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.queryRows(query, {\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.queryLines(query, {\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): QueryExecutor {\n    const {org, type, gzip} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n          },\n        },\n        new ChunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type || 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WritePrecision, WriteOptions} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 client that uses HTTP API described in https://v2.docs.influxdata.com/v2.0/reference/api/ .\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport || new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates [[WriteApi]] for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @param org Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket The destination bucket for writes.\n   * @param precision Timestamp precision for line items.\n   * @param writeOptions Custom write options.\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecision = WritePrecision.ns,\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions || this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates [[QueryAPI]] for the supplied organization .\n   *\n   * @param org organization\n   * @return query api instance\n   */\n  getQueryApi(org: string): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n","import {escape} from './util/escape'\nimport {PointSettings} from './options'\n/**\n * Point defines the values that will be written to the database.\n * See [Go Implementation](http://bit.ly/influxdata-point)\n */\nexport default class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  private fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName the measurement name\n   * @return new instance of {@link Point}\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name measurement name\n   * @return new instance of {@link Point}\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name  tag name\n   * @param value tag value\n   * @return this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field field name\n   * @param value field value\n   * @return this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point time. A string or number value can be used\n   * to carry an int64 value of a precision that depends\n   * on WriteApi, nanoseconds by default. An undefined value\n   * generates a local timestamp using the client's clock.\n   * An empty string can be used to let the server assign\n   * the timestamp.\n   *\n   * @param value point time\n   * @return this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  public toLineProtocol(settings?: PointSettings): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n"],"names":["DEFAULT_ConnectionOptions","timeout","DEFAULT_RetryDelayStrategyOptions","Object","freeze","retryJitter","minRetryDelay","maxRetryDelay","DEFAULT_WriteOptions","batchSize","flushInterval","writeFailed","maxRetries","maxBufferLines","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","IllegalArgumentError","Error","[object Object]","message","super","setPrototypeOf","this","prototype","HttpError","statusMessage","body","retryAfter","setRetryAfter","test","_retryAfter","parseInt","RETRY_CODES","getRetryDelay","error","retVal","Math","round","random","RequestTimedOutError","AbortError","name","reEscape","Escaper","chars","wrap","patterns","join","replace","_re","RegExp","val","lastIndex","chunkIndex","escapedVal","match","exec","slice","index","length","bindEsc","e","escape","bind","measurement","quoted","tag","useHrTime","useProcessHrtime","use","process","hrtime","startHrMillis","undefined","startHrTime","lastMillis","Date","now","stepsInMillis","nanos","hrTime","millis","floor","String","substr","micros","trunc","seconds","currentTime","dateToProtocolTimestamp","d","getTime","identity","x","typeSerializers","boolean","unsignedLong","long","double","string","base64Binary","dateTime","duration","FluxTableMetaData","columns","forEach","col","i","label","values","acc","column","defaultValue","dataType","FluxTableColumn","object","group","Boolean","FLUX_VALUE","Symbol","FluxParameter","fluxValue","sanitizeString","value","toString","prepareRetVal","substring","c","charAt","sanitizeFloat","dot","sanitizeRegExp","fluxExpression","toFluxValue","toISOString","provider","console","warn","Logger","RetryStrategyImpl","options","success","delay","min","currentDelay","max","RetryBuffer","maxLines","retryLines","lines","retryCount","closed","retryTime","nextRetryTime","first","size","origSize","newSize","newFirst","next","toAdd","last","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","clearTimeout","WriteBuffer","maxChunkRecords","flushFn","scheduleSend","Array","record","flush","reset","Promise","resolve","WriteApiImpl","transport","org","bucket","precision","writeOptions","method","headers","content-type","httpPath","encodeURIComponent","writeBuffer","_clearFlushTimeout","sendBatch","retryStrategy","retryBuffer","attempts","self","reject","send","sendOptions","onRetry","call","addLines","nextDelay","add","records","point","line","toLineProtocol","points","writePoint","finally","remaining","close","tags","defaultTags","keys","key","nodeChunkCombiner","concat","second","Buffer","toUtf8String","chunk","start","end","allocUnsafe","copy","zlibOptions","zlib","Z_SYNC_FLUSH","finishFlush","emptyBuffer","CancellableImpl","cancelled","NodeHttpTransport","connectionOptions","url","parse","defaultOptions","transportOptions","port","protocol","hostname","requestApi","http.request","https.request","path","callbacks","createRequestMessage","cancellable","useCancellable","_request","JSON","stringify","contentType","buffer","data","complete","bodyBuffer","from","User-Agent","token","authorization","requestMessage","listeners","state","responseStarted","completeCommunicationObserver","isCancelled","req","res","resume","on","responseData","createGunzip","pipe","s","write","defaultRowMapping","tableMeta","toObject","ChunksToLines","target","chunks","finished","bufferReceived","previous","LineSplitter","reuse","_reuse","reusedValues","lastSplitLength","quoteCount","startIndex","count","getValue","push","toLineObserver","consumer","splitter","withReuse","lastMeta","expectMeta","firstColumnIndex","splitLine","startsWith","symbolObservable","observable","QuerySubscription","observer","executor","isClosed","cancel","noop","ObservableQuery","decorator","observerOrNext","completeObserver","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","query","createExecutor","rowMapper","queryRows","queryLines","type","gzip","decorateRequest","dialect","accept-encoding","chunkCombiner","request","_options","endsWith","TransportImpl","measurementName","fields","isNaN","parseFloat","time","settings","fieldsLine","sort","tagsLine","convertTime","canRetry","code","strings","parts","partIndex","text","sanitized","sanitizeDateTime"],"mappings":"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"}