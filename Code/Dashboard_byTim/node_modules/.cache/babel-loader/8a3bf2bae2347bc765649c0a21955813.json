{"remainingRequest":"/home/philippine/Documents/TD/Code/Dashboard_byTim/node_modules/thread-loader/dist/cjs.js!/home/philippine/Documents/TD/Code/Dashboard_byTim/node_modules/babel-loader/lib/index.js!/home/philippine/Documents/TD/Code/Dashboard_byTim/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/philippine/Documents/TD/Code/Dashboard_byTim/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/philippine/Documents/TD/Code/Dashboard_byTim/src/components/Cards/ChartCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/philippine/Documents/TD/Code/Dashboard_byTim/src/components/Cards/ChartCard.vue","mtime":1590499061106},{"path":"/home/philippine/Documents/TD/Code/Dashboard_byTim/node_modules/cache-loader/dist/cjs.js","mtime":1590495427356},{"path":"/home/philippine/Documents/TD/Code/Dashboard_byTim/node_modules/thread-loader/dist/cjs.js","mtime":1590495427722},{"path":"/home/philippine/Documents/TD/Code/Dashboard_byTim/node_modules/babel-loader/lib/index.js","mtime":1590495415369},{"path":"/home/philippine/Documents/TD/Code/Dashboard_byTim/node_modules/cache-loader/dist/cjs.js","mtime":1590495427356},{"path":"/home/philippine/Documents/TD/Code/Dashboard_byTim/node_modules/vue-loader/lib/index.js","mtime":1590495427740}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Chartist from 'chartist';\nimport Card from './Card.vue';\nexport default {\n  name: 'chart-card',\n  components: {\n    Card\n  },\n  props: {\n    chartType: {\n      type: String,\n      default: 'Line' // Line | Pie | Bar\n\n    },\n    chartOptions: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    chartData: {\n      type: Object,\n      default: () => {\n        return {\n          labels: [],\n          series: []\n        };\n      }\n    },\n    responsiveOptions: [Object, Array]\n  },\n\n  data() {\n    return {\n      chartId: 'no-id',\n      $Chartist: null,\n      chart: null\n    };\n  },\n\n  methods: {\n    /***\n     * Initializes the chart by merging the chart options sent via props and the default chart options\n     */\n    initChart() {\n      var chartIdQuery = `#${this.chartId}`;\n      this.chart = this.$Chartist[this.chartType](chartIdQuery, this.chartData, this.chartOptions, this.responsiveOptions);\n      this.$emit('initialized', this.chart);\n\n      if (this.chartType === 'Line') {\n        this.animateLineChart();\n      }\n\n      if (this.chartType === 'Bar') {\n        this.animateBarChart();\n      }\n    },\n\n    /***\n     * Assigns a random id to the chart\n     */\n    updateChartId() {\n      const currentTime = new Date().getTime().toString();\n      const randomInt = this.getRandomInt(0, currentTime);\n      this.chartId = `div_${randomInt}`;\n    },\n\n    getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    animateLineChart() {\n      let seq = 0;\n      let durations = 500;\n      let delays = 80;\n      this.chart.on('draw', data => {\n        if (data.type === 'line' || data.type === 'area') {\n          data.element.animate({\n            d: {\n              begin: 600,\n              dur: 700,\n              from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n              to: data.path.clone().stringify(),\n              easing: this.$Chartist.Svg.Easing.easeOutQuint\n            }\n          });\n        } else if (data.type === 'point') {\n          seq++;\n          data.element.animate({\n            opacity: {\n              begin: seq * delays,\n              dur: durations,\n              from: 0,\n              to: 1,\n              easing: 'ease'\n            }\n          });\n        }\n      });\n      seq = 0;\n    },\n\n    animateBarChart() {\n      let seq = 0;\n      let durations = 500;\n      let delays = 80;\n      this.chart.on('draw', data => {\n        if (data.type === 'bar') {\n          seq++;\n          data.element.animate({\n            opacity: {\n              begin: seq * delays,\n              dur: durations,\n              from: 0,\n              to: 1,\n              easing: 'ease'\n            }\n          });\n        }\n      });\n    }\n\n  },\n\n  async mounted() {\n    this.updateChartId();\n    this.$Chartist = Chartist;\n    this.initChart();\n  }\n\n};",{"version":3,"sources":["ChartCard.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"card\">\n    <div class=\"card-header\" v-if=\"$slots.header\">\n      <slot name=\"header\"></slot>\n    </div>\n    <div class=\"card-body\">\n      <div :id=\"chartId\" class=\"ct-chart\"></div>\n    </div>\n    <div class=\"card-footer\" v-if=\"$slots.footer\">\n      <slot name=\"footer\"></slot>\n    </div>\n  </div>\n</template>\n<script>\n  import Chartist from 'chartist'\n  import Card from './Card.vue'\n\n  export default {\n    name: 'chart-card',\n    components: {\n      Card\n    },\n    props: {\n      chartType: {\n        type: String,\n        default: 'Line' // Line | Pie | Bar\n      },\n      chartOptions: {\n        type: Object,\n        default: () => {\n          return {}\n        }\n      },\n      chartData: {\n        type: Object,\n        default: () => {\n          return {\n            labels: [],\n            series: []\n          }\n        }\n      },\n      responsiveOptions: [Object, Array]\n    },\n    data () {\n      return {\n        chartId: 'no-id',\n        $Chartist: null,\n        chart: null\n      }\n    },\n    methods: {\n      /***\n       * Initializes the chart by merging the chart options sent via props and the default chart options\n       */\n      initChart () {\n        var chartIdQuery = `#${this.chartId}`\n        this.chart = this.$Chartist[this.chartType](chartIdQuery, this.chartData, this.chartOptions, this.responsiveOptions)\n        this.$emit('initialized', this.chart)\n        if (this.chartType === 'Line') {\n          this.animateLineChart()\n        }\n        if (this.chartType === 'Bar') {\n          this.animateBarChart()\n        }\n      },\n      /***\n       * Assigns a random id to the chart\n       */\n      updateChartId () {\n        const currentTime = new Date().getTime().toString()\n        const randomInt = this.getRandomInt(0, currentTime)\n        this.chartId = `div_${randomInt}`\n      },\n      getRandomInt (min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min\n      },\n      animateLineChart () {\n        let seq = 0\n        let durations = 500\n        let delays = 80\n        this.chart.on('draw', (data) => {\n          if (data.type === 'line' || data.type === 'area') {\n            data.element.animate({\n              d: {\n                begin: 600,\n                dur: 700,\n                from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n                to: data.path.clone().stringify(),\n                easing: this.$Chartist.Svg.Easing.easeOutQuint\n              }\n            })\n          } else if (data.type === 'point') {\n            seq++\n            data.element.animate({\n              opacity: {\n                begin: seq * delays,\n                dur: durations,\n                from: 0,\n                to: 1,\n                easing: 'ease'\n              }\n            })\n          }\n        })\n        seq = 0\n      },\n      animateBarChart () {\n        let seq = 0\n        let durations = 500\n        let delays = 80\n        this.chart.on('draw', (data) => {\n          if (data.type === 'bar') {\n            seq++\n            data.element.animate({\n              opacity: {\n                begin: seq * delays,\n                dur: durations,\n                from: 0,\n                to: 1,\n                easing: 'ease'\n              }\n            })\n          }\n        })\n      }\n    },\n    async mounted () {\n      this.updateChartId()\n      this.$Chartist = Chartist\n      this.initChart()\n    }\n  }\n</script>\n<style>\n\n</style>\n"],"sourceRoot":"src/components/Cards"}]}